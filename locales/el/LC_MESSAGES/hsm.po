# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-11 10:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: el\n"
"Language-Team: el <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../hsm/faq.rst:2
msgid "Nitrokey HSM FAQ"
msgstr ""

#: ../shared-faqs/nitrokeys.rst.inc:2
msgid "**Q:** Which Operating Systems are supported?"
msgstr ""

#: ../shared-faqs/nitrokeys.rst.inc:2
msgid "Windows, Linux and macOS."
msgstr ""

#: ../shared-faqs/nitrokeys.rst.inc:7
msgid "**Q:** What can I use the Nitrokey for?"
msgstr ""

#: ../shared-faqs/nitrokeys.rst.inc:5
msgid ""
"See the `overview <https://www.nitrokey.com/products/nitrokeys>`_ of "
"supported use cases."
msgstr ""

#: ../hsm/faq.rst:17
msgid "**Q:** What is the maximum length of the PIN?"
msgstr ""

#: ../hsm/faq.rst:9
msgid ""
"Nitrokey uses PINs instead of passwords. The main difference is that the "
"hardware limits the amount of tries to three while a limit doesn't exist "
"for passwords. Because of this, a short PIN is still secure and there is "
"not need to choose a long and complex PIN."
msgstr ""

#: ../hsm/faq.rst:14
msgid ""
"Nitrokey PINs can be up to 16 digits long and can consist of numbers, "
"characters and special characters. Note: When using GnuPG or OpenSC, 32 "
"character long PINs can be used but aren't supported by Nitrokey App."
msgstr ""

#: ../hsm/faq.rst:27
msgid "**Q:** What is the User PIN for?"
msgstr ""

#: ../hsm/faq.rst:20
msgid ""
"The PIN is at least 6-digits long and is used to get access to the "
"content of the Nitrokey. This is the PIN you will use a lot in every day "
"use."
msgstr ""

#: ../hsm/faq.rst:24
msgid ""
"The PIN can have up to 16 digits and other characters (e.g. alphabetic "
"and special characters). But as the PIN is blocked as soon three wrong "
"PIN attempts were done, it is sufficiently secure to only have a 6 digits"
" PIN."
msgstr ""

#: ../hsm/faq.rst:34
msgid "**Q:** What is the SO PIN for?"
msgstr ""

#: ../hsm/faq.rst:30
msgid ""
"The SO PIN is used in the Nitrokey HSM only and is something like a "
"\"master\" PIN with special properties. Please read this instructions "
"carefully to understand the SO PIN of the Nitrokey HSM."
msgstr ""

#: ../hsm/faq.rst:34
msgid "The SO PIN has to be exactly 16 digits long."
msgstr ""

#: ../hsm/faq.rst:42
msgid "**Q:** How many data objects (DF, EF) can be stored?"
msgstr ""

#: ../hsm/faq.rst:37
msgid "76 KB EEPROM total, that can be used for"
msgstr ""

#: ../hsm/faq.rst:39
msgid "max. 150 x ECC-521 keys or"
msgstr ""

#: ../hsm/faq.rst:40
msgid "max. 300 x ECC/AES-256 keys or"
msgstr ""

#: ../hsm/faq.rst:41
msgid "max. 19 x RSA-4096 keys or"
msgstr ""

#: ../hsm/faq.rst:42
msgid "max. 38 x RSA-2048 keys"
msgstr ""

#: ../hsm/faq.rst:45
msgid "**Q:** How many keys can I store?"
msgstr ""

#: ../hsm/faq.rst:45
msgid "Nitrokey HSM can store 20 RSA-2048 and 31 ECC-256 key pairs."
msgstr ""

#: ../hsm/faq.rst:53
msgid "**Q:** How fast is encryption and signing?"
msgstr ""

#: ../hsm/faq.rst:48
msgid "Key generation on-card: RSA 2048: 2 per minute"
msgstr ""

#: ../hsm/faq.rst:49
msgid "Key generation on-card: ECC 256: 10 per minute."
msgstr ""

#: ../hsm/faq.rst:50
msgid "Signature creation with off-card hash: RSA 2048; 100 per minute"
msgstr ""

#: ../hsm/faq.rst:51
msgid "Signature creation with off-card hash: ECDSA 256: 360 per minute"
msgstr ""

#: ../hsm/faq.rst:52
msgid ""
"Signature creation with on-card SHA-256 and 1 kb data: RSA 2048; 68 per "
"minute"
msgstr ""

#: ../hsm/faq.rst:53
msgid ""
"Signature creation with on-card SHA-256 and 1 kb data: ECDSA 256: 125 per"
" minute"
msgstr ""

#: ../hsm/faq.rst:57
msgid "**Q:** How can I distinguish a Nitrokey HSM 1 from an Nitrokey HSM 2?"
msgstr ""

#: ../hsm/faq.rst:56
msgid ""
"Use ``opensc-tool --list-algorithms`` and compare with the table below. "
"Please also see `this thread`_ for the factsheets and more details."
msgstr ""

#: ../shared-faqs/algos.rst.inc:3
msgid "**Q:** Which algorithms and maximum key length are supported?"
msgstr ""

#: ../shared-faqs/algos.rst.inc:3
msgid "See the following table:"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "Start"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "Pro + Storage"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "Pro 2 + Storage 2"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "Nitrokey 3"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "HSM"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "HSM 2"
msgstr ""

#: ../shared-faqs/algos.rst.inc:8
msgid "rsa1024"
msgstr ""

#: ../shared-faqs/algos.rst.inc:8 ../shared-faqs/algos.rst.inc:10
#: ../shared-faqs/algos.rst.inc:12 ../shared-faqs/algos.rst.inc:14
#: ../shared-faqs/algos.rst.inc:16 ../shared-faqs/algos.rst.inc:18
#: ../shared-faqs/algos.rst.inc:20 ../shared-faqs/algos.rst.inc:22
#: ../shared-faqs/algos.rst.inc:24 ../shared-faqs/algos.rst.inc:26
#: ../shared-faqs/algos.rst.inc:28 ../shared-faqs/algos.rst.inc:30
#: ../shared-faqs/algos.rst.inc:32 ../shared-faqs/algos.rst.inc:34
msgid "✓"
msgstr ""

#: ../shared-faqs/algos.rst.inc:10
msgid "rsa2048"
msgstr ""

#: ../shared-faqs/algos.rst.inc:12
msgid "rsa3072"
msgstr ""

#: ../shared-faqs/algos.rst.inc:14
msgid "rsa4096"
msgstr ""

#: ../shared-faqs/algos.rst.inc:16
msgid "curve25519"
msgstr ""

#: ../shared-faqs/algos.rst.inc:18
msgid "NIST-P 192"
msgstr ""

#: ../shared-faqs/algos.rst.inc:20
msgid "NIST-P 256"
msgstr ""

#: ../shared-faqs/algos.rst.inc:22
msgid "NIST-P 384-521"
msgstr ""

#: ../shared-faqs/algos.rst.inc:24
msgid "Brainpool 192"
msgstr ""

#: ../shared-faqs/algos.rst.inc:26
msgid "Brainpool 256-320"
msgstr ""

#: ../shared-faqs/algos.rst.inc:28
msgid "Brainpool 384-521"
msgstr ""

#: ../shared-faqs/algos.rst.inc:30
msgid "secp192"
msgstr ""

#: ../shared-faqs/algos.rst.inc:32
msgid "secp256"
msgstr ""

#: ../shared-faqs/algos.rst.inc:34
msgid "secp521"
msgstr ""

#: ../hsm/faq.rst:64
msgid ""
"**Q:** How can I use the True Random Number Generator (TRNG) of the "
"Nitrokey HSM for my applications?"
msgstr ""

#: ../hsm/faq.rst:62
msgid ""
"Nitrokey HSM can be used with `Botan`_ and `TokenTools`_ by using OpenSC "
"as a PKCS#11 driver."
msgstr ""

#: ../hsm/faq.rst:64
msgid ""
"OpenSSL can't use Nitrokey HSM's RNG directly because engine-pkcs11 "
"doesn't contain a mapping for OpenSSL to C_GenerateRandom."
msgstr ""

#: ../hsm/faq.rst:68
msgid "**Q:** How good is the Random Number Generator?"
msgstr ""

#: ../hsm/faq.rst:67
msgid ""
"Nitrokey HSM uses the True Random Number Generator of JCOP 2.4.1r3 which "
"has a quality of DRNG.2 (according to `AIS 31`_ of the German Federal "
"Office for Information Security, BSI)."
msgstr ""

#: ../hsm/faq.rst:84
msgid "**Q:** Which API can I use?"
msgstr ""

#: ../hsm/faq.rst:71
msgid ""
"OpenSC: Comprehensive instructions exist for OpenSC framework. There is "
"nitrotool as a more comfortable frontend to OpenSC."
msgstr ""

#: ../hsm/faq.rst:74
msgid ""
"Embedded Systems: For systems with minimal memory footprint a read/only "
"PKCS#11 module is provided by the sc-hsm-embedded project.  This PKCS#11 "
"module is useful for deployments where key generation at the user's "
"workplace is not required. The PKCS#11 module also supports major "
"electronic signature cards available in the German market."
msgstr ""

#: ../hsm/faq.rst:80
msgid ""
"OpenSCDP: The SmartCard-HSM is fully integrated with OpenSCDP, the open "
"smart card development platform. See the public support scripts for "
"details. To import existing keys you can use its SCSH or NitroKeyWrapper."
msgstr ""

#: ../hsm/faq.rst:88
msgid "**Q:** Is the Nitrokey HSM 2 Common Criteria or FIPS certified?"
msgstr ""

#: ../hsm/faq.rst:87
#, python-format
msgid ""
"The security controller (NXP JCOP 3 P60) is Common Criteria EAL 5+ "
"certified up to the OS level (`Certificate "
"<https://commoncriteriaportal.org/files/epfiles/NSCIB-"
"certificate%2021-98209.pdf>`__, `Certification Report "
"<https://commoncriteriaportal.org/files/epfiles/Certification%20Report"
"%20NSCIB-CC-98209-CR5%20-%20version%203.0%20(2022-10-14).pdf>`__, "
"`Security Target <https://commoncriteriaportal.org/files/epfiles/NSCIB-"
"CC-98209_5-STLite.pdf>`__, `Java Card System Protection Profile Open "
"Configuration, Version 3.0 "
"<https://commoncriteriaportal.org/files/ppfiles/ANSSI-CC-"
"profil_PP-2010-03en.pdf>`__)."
msgstr ""

#: ../hsm/faq.rst:91
msgid "**Q:** How to import an existing key into the Nitrokey HSM?"
msgstr ""

#: ../hsm/faq.rst:91
msgid ""
"First, `set up`_ your Nitrokey HSM to use key backup and restore. Then "
"use Smart Card Shell for importing. If your key is stored in a Java key "
"store you can use `NitroKeyWrapper`_  instead."
msgstr ""

#: ../hsm/faq.rst:94
msgid ""
"**Q:** How do I secure my Cloud Infrastructure/Kubernetes with Nitrokey "
"HSM?"
msgstr ""

#: ../hsm/faq.rst:94
msgid ""
"An approach to secure keys for Hashicorp Vault/Bank-Vault on a Nitrokey "
"HSM can be found at `banzaicloud.com`_."
msgstr ""

#: ../hsm/faq.rst:99
msgid "**Q:** Can I use Nitrokey HSM with cryptocurrencies?"
msgstr ""

#: ../hsm/faq.rst:97
msgid ""
"J.v.d.Bosch wrote a simple, free python `program`_ to secure the private "
"key of a Bitcoin wallet in a HSM. `Tezos`_ has been `reported`_ to work "
"with Nitrokey HSM."
msgstr ""

#: ../hsm/index.rst:8
msgid "Frequently Asked Questions"
msgstr ""

#: ../hsm/index.rst:16
msgid "Windows"
msgstr ""

#: ../hsm/index.rst:16
msgid "macOS"
msgstr ""

#: ../hsm/index.rst:16
msgid "Linux"
msgstr ""

#: ../hsm/index.rst:2
msgid "Nitrokey HSM 2"
msgstr ""

#: ../hsm/index.rst:6
msgid "First check the:"
msgstr ""

#: ../hsm/index.rst:14
msgid "or choose your operating system:"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:2
msgid "TLS Setup With Apache2"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:8
msgid ""
"The very same concept as descriped here can be used for many applications"
" using openssl as crypto-backend. The concept mostly boils down to: "
"replace (secret) key-file with PKCS#11 URL referencing a key on a "
"security token (Nitrokey)"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:15 ../hsm/import-keys-certs.rst.inc:24
#: ../hsm/pkcs11-url.rst.inc:12
msgid "Preparation"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:17
msgid ""
"ensure that the `apache2` version is at least 2.4.42 for proper "
"``mod_ssl`` support"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:19
msgid "activate ``mod_ssl`` using ``a2enmod ssl``, if not already done"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:21
msgid ""
"additionally ``openssl`` is needed and ``libengine-pkcs11-openssl`` see "
":doc:`PKCS#11 URL<pkcs11-url>`"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:27
msgid "Configure Apache2 to Use a Security Key"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:29
msgid ""
"Basically the only thing to do is replace ``SSLCertificateFile`` with the"
" proper PKCS#11 URL and delete any other references to keys or "
"certificates. E.g., ``SSLCertificateKeyFile`` is not needed anymore."
msgstr ""

#: ../hsm/apache2-tls.rst.inc:33
msgid "An example directive might look like this:"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:39
msgid ""
"The proper PKCS#11 URL can be extracted as documented in :doc:`PKCS#11 "
"URL Generation<pkcs11-url>`"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:41
msgid "Be sure to place the directive inside a `VirtualHost` configuration."
msgstr ""

#: ../hsm/apache2-tls.rst.inc:44
msgid "Provide PIN During Apache2 Startup"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:46
msgid ""
"Using the previously described method Apache2 will ask on every startup "
"for the User-PIN, thus basically declining batch startup. Apache2 "
"provides another directive to provide the PIN during startup."
msgstr ""

#: ../hsm/apache2-tls.rst.inc:54
msgid ""
"Apache2 expects an executable after ``|``, which will be executed during "
"startup and it's output (trailing newline is expected) will be used as "
"PIN. Obviously arbitrary complex PIN retrieval methods can be implemented"
" using this approach. Although here a trivial example has been chosen to "
"just ``echo`` the PIN during startup."
msgstr ""

#: ../hsm/apache2-tls.rst.inc:59
msgid ""
"Further ``SSLPassPhraseDialog`` is a global directive, thus has to be "
"placed in the global configuration scope in Apache2."
msgstr ""

#: ../hsm/apache2-tls.rst.inc:64
msgid ""
"This shown example is not a secure mechanism to pass your PIN, as it will"
" be written in plain-text inside your configuration"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:67
msgid "See the `Apache2 mod_ssl documentation`_ for more details on this feature."
msgstr ""

#: ../hsm/apache2-tls.rst.inc:70
msgid "Complete Apache2 Config Example"
msgstr ""

#: ../hsm/apache2-tls.rst.inc:71
msgid "A complete Apache2 (``VirtualHost``) config snippet might look like this:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:2
msgid "Automatic Screen Lock at Removal"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:6
msgid ""
"This guide will walk you through the configuration of your computer, to "
"automatically lock your session when you remove the Nitrokey."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:8
msgid ""
"The configuration requires the creation of two files under two different "
"directories."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:11
msgid "Requirements"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:13
msgid ""
"Ubuntu 20.04 or Debian 10 (Buster), both with `Gnome Display Manager "
"<https://wiki.gnome.org/Projects/GDM>`__ installed."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:16
msgid "Nitrokey Pro 2, Nitrokey Storage 2, or Nitrokey HSM 2"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:19
msgid "Configuration"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:22
msgid "Create the ``.rules`` file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:24
msgid "With your favorite text editor create a file called ``85-nitrokey.rules``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:30
msgid "Add the following line to the file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:36
msgid "Save the file and quit the editor."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:38
msgid ""
"This file sets up a new hardware rule that executes the ``gnome-"
"screensaver-lock`` at removal of the Nitrokey device."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:40
msgid ""
"You should change the configuration according to the device you are using"
" as following:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:42
msgid "Nitrokey Pro: ``ENV{PRODUCT}==\"20a0/4108/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:43
msgid "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:44
msgid "Nitrokey Storage: ``ENV{PRODUCT}==\"20a0/4109/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:46
msgid ""
"If you have a different device and need to find out the ``ENV{PRODUCT}`` "
"string you can use the following command to find out the infos when "
"plugging in:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:53
msgid "Create the ``gnome-screensaver-lock`` script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:55
msgid ""
"With your favorite text editor create a file called ``gnome-screensaver-"
"lock``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:61
msgid "Add the following text"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:71
msgid ""
"In the first step, this script looks for the user-name of the gnome "
"session, i.e. ``user``."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:73
msgid ""
"When it is called at Nitrokey removal, the script queries ``user``, "
"switches to its session, and locks the screen by prompting the screen-"
"saver screen."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:76
msgid "Execute the script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:78
msgid ""
"Once all set up, execute the script once, and it will lock the screen. It"
" does not matter if the Nitrokey is plugged or not for this first "
"execution."
msgstr ""

#: ../hsm/smime.rst.inc:32 ../hsm/smime.rst.inc:52
#: ../pro/linux/automatic-screen-lock.rst:81
#: ../pro/linux/hard-disk-encryption.rst:114 ../pro/smime-outlook.rst.inc:34
#: ../pro/smime-thunderbird.rst.inc:43
msgid "Usage"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:83
msgid ""
"By now you can log back to your session by entering your password, and "
"(re)plug you Nitrokey if you did not do it before."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:85
msgid ""
"The next time(s) you unplug your Nitrokey from the computer, it will "
"automatically lock the screen."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:2
msgid "Creating a Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:6
msgid ""
"This article shows you how to setup your own private certificate "
"authority backed by a Nitrokey HSM. This certificate authority has no "
"automation and does not really scale. Other open source projects can be "
"referenced for automation and scalability."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:9
msgid "Choose Cryptographic Algorithms"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:11
msgid ""
"I’m going to assume that you’re as paranoid as I am, so I will be using "
"the following command for generating private keys:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:17
msgid ""
"But, if you’re less paranoid that I am, you can safely choose the "
"following options:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:24
msgid ""
"Likewise, I will be using the sha512 algorithm throughout this article, "
"but sha256 can safely be used."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:27
msgid "Preparing to Start"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:29
msgid "To start with, you need to pick a directory to store your CA."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:40
msgid "Install the necessary tools:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:50
msgid ""
"For Windows download the official `OpenSC releases "
"<https://github.com/OpenSC/OpenSC/releases>`__ and make sure you install "
"`p11tool as described <https://github.com/thales-e-security/p11tool>`__. "
"Using the PowerShell most commands should be identical as long as both "
"tools and their binaries are within your ``PATH``."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:56
msgid "Creating The Root Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:58
msgid ""
"We start by generating the private key for the certificate authority "
"directly on the Nitrokey HSM. This allows us to use the private key in "
"the future, but not access it."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:81
msgid ""
"Note the ID number (e0161cc8b6f5d66ac6835ecdecb623fc0506a675), we’ll need"
" it later."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:83
#: ../hsm/certificate-authority.rst.inc:238
msgid ""
"If you need the ID in the future, you can list the keys on the Nitrokey "
"HSM:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:89
#: ../hsm/certificate-authority.rst.inc:244
msgid ""
"We need to create a config file to generate a self-signed public "
"certificate."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:95
#: ../hsm/certificate-authority.rst.inc:250
msgid ""
"Fill out the request information in <angle brackets> with information for"
" your CA."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:155
msgid ""
"Generate the self-signed public certificate from the private key. Use the"
" private key id value from earlier."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:163
msgid ""
"Verify that the root certificate was generated correctly. Verify that "
"Signature-Algorithm matches above and below. Verify that Issuer and "
"Subject match, all root certificates are self signed. Verify that Key "
"Usage matches what was in the v3_ca information in our config file."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:211
msgid "Creating The Intermediate Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:213
msgid ""
"We continue by generating the private key for the intermediate "
"certificate authority directly on the Nitrokey HSM. This allows us to use"
" the private key in the future, but not access it."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:236
msgid ""
"Note the ID number (bcb48fe9b566ae61891aabbfde6a23d4ff3ab639), we’ll need"
" it later."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:277
msgid ""
"Generate the certificate signing request for the intermediate CA from the"
" intermediate CA’s private key. Use the private key ID value from "
"earlier."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:285
msgid ""
"Verify that the CSR was created correctly. Verify that your Subject is "
"correct. Verify that your Public Key and Signature Algorithm are correct."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:318
#: ../hsm/certificate-authority.rst.inc:523
msgid "We need to find out the fully qualified PKCS#11 URI for your private key:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:356
#: ../hsm/certificate-authority.rst.inc:561
msgid "In this instance, the fully qualified PKCS#11 URI is:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:362
msgid ""
"Now, we need to create a config file to use the private key of the root "
"certificate to sign the csr of the intermediate certificate."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:414
msgid "Then sign the intermediate certificate with the root certificate."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:454
msgid ""
"Verify that the root certificate was generated correctly. Verify that the"
" Issuer and Subject are different, and correct. Verify that the Key Usage"
" matches the config file. Verify that the signature algorithm are correct"
" above and below."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:501
msgid ""
"Verify that the intermediate certificate verifies against the root "
"certificate."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:508
msgid "Create a certificate chain file:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:514
msgid "You now have a certificate authority backed by an HSM."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:517
msgid "Sign a Server Certificate"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:519
msgid ""
"Now that you have a certificate authority, you’d probably like to know "
"how to use it."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:521
msgid ""
"Create a CSR in the normal method for your application. Proper creation "
"of your certificate, including SAN, for your particular application is "
"outside the scope of this document."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:567
msgid ""
"Create a config file to use the private key of the intermediate "
"certificate to sign the CSRs of your servers."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:622
msgid "Then run openssl to sign the server’s CSR."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:671
msgid "References"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:673
msgid "I used the following resources to help in compiling this document."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:675
msgid ""
"`How to initialize your Nitrokey HSM "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-"
"device>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:676
msgid ""
"`How to create a root and intermediate CA <https://jamielinux.com/docs"
"/openssl-certificate-authority/create-the-root-pair.html>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:677
msgid ""
"`How to ensure the serial numbers of your intermediate CA and server "
"certs are up to spec <https://www.phildev.net/ssl/creating_ca.html>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:678
msgid ""
"`How to generate ECC private keys <https://dev.to/benjaminblack"
"/obtaining-an-elliptic-curve-dsa-certificate-with-lets-encrypt-51bc>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:679
msgid ""
"`How to find the PCKS11 URI from your HSM "
"<https://www.infradead.org/openconnect/pkcs11.html>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:680
msgid ""
"`Troubleshooting (forum) <https://support.nitrokey.com/t/pki-ca-nitrokey-"
"hsm-does-not-support-signing/2598/14>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:683
msgid ""
"This document was originally `written by lyntux "
"<https://gist.github.com/lyntux/f02c6c3414ce48bc8ea8ab6dcdba1623>`__"
msgstr ""

#: ../hsm/linux/dnssec.rst:2
msgid "DNSSEC"
msgstr ""

#: ../hsm/linux/dnssec.rst:7
msgid ""
"Protect your domain name resolution using DNSSEC and a Nitrokey HSM as "
"secure key store. It's based on Smartcard-HSM which is why the following "
"resources apply:"
msgstr ""

#: ../hsm/linux/dnssec.rst:9
msgid ""
"Luis D Espinoza Sanchez & Eberhard W Lisse held a `session on using the "
"SmartCard-HSM for DNSSEC <https://singapore52.icann.org/en/schedule/mon-"
"tech/presentation-dnssec-card-signing-09feb15-en.pdf>`__ at the 2015 "
"ICAAN Meeting in Singapore."
msgstr ""

#: ../hsm/linux/dnssec.rst:10
msgid ""
"Jan-Piet Mens wrote a nice article about `integrating the SmartCard-HSM "
"with PowerDNS <https://jpmens.net/2015/03/30/powerdns-with-a-smartcard-"
"hsm-for-dnssec/>`__."
msgstr ""

#: ../hsm/linux/dnssec.rst:11
msgid ""
"Integration with `OpenDNSSEC <https://www.opendnssec.org/>`__ has been "
"successfully tested."
msgstr ""

#: ../pro/gpa.rst:2
msgid "Setup With Gnu Privacy Assistant (GPA)"
msgstr ""

#: ../pro/gpa.rst:4
msgid ""
"This document describes how to use Gnu Privacy Assistant (GPA) to set up "
"the Nitrokey for its first usage."
msgstr ""

#: ../pro/gpa.rst:6
msgid ""
"First you need to install Gnu Privacy Assistant (GPA). For Windows you "
"should download and install the `GPG4Win <https://www.gpg4win.org/>`__ "
"package which contains GPA. For Linux you should install the GPA package "
"of your distribution (e.g. on Ubuntu: sudo apt-get install gpa )."
msgstr ""

#: ../pro/gpa.rst:8
msgid ""
"Start GPA and select the Card Manager; either by pressing the icon at the"
" top or by choosing Card Manager in the Windows menu."
msgstr ""

#: ../hsm/smime.rst.inc:-1 ../pro/gpa.rst ../pro/smart-policy.rst.inc:-1
#: ../pro/smime-outlook.rst.inc:-1 ../pro/smime-thunderbird.rst.inc:-1
msgid "img1"
msgstr ""

#: ../pro/gpa.rst:13
msgid ""
"The window of the Card Manager will appear. Enter your salutation, name "
"and optional other information. While doing so you might be asked to "
"enter the admin PIN."
msgstr ""

#: ../pro/gpa.rst ../pro/smart-policy.rst.inc:-1
#: ../pro/smime-outlook.rst.inc:-1 ../pro/smime-thunderbird.rst.inc:-1
msgid "img2"
msgstr ""

#: ../pro/gpa.rst:18
msgid "Confirm this window and enter the admin PIN in the next window."
msgstr ""

#: ../pro/gpa.rst ../pro/smart-policy.rst.inc:-1
#: ../pro/smime-outlook.rst.inc:-1 ../pro/smime-thunderbird.rst.inc:-1
msgid "img3"
msgstr ""

#: ../pro/gpa.rst:23
msgid ""
"In the Card Manager window you might need to scroll down until you see "
"the buttons to change the PINs. The term PIN is used interchangeable with"
" \"password\". Press the first button \"Change PIN\" in order to change "
"the user password. Read and confirm the following information window."
msgstr ""

#: ../pro/gpa.rst ../pro/smart-policy.rst.inc:-1
#: ../pro/smime-thunderbird.rst.inc:-1
msgid "img4"
msgstr ""

#: ../pro/gpa.rst:28
msgid ""
"Choose and enter your own PIN with a minimum length of six characters. "
"This PIN is required for the daily usage of the Nitrokey."
msgstr ""

#: ../pro/gpa.rst ../pro/smart-policy.rst.inc:-1
msgid "img5"
msgstr ""

#: ../pro/gpa.rst:33
msgid ""
"Go back to the Card Manager window in step three. This time you choose "
"the third button Change PIN in order to change the admin PIN. The admin "
"PIN is required to change the information on the Nitrokey and to change "
"the cryptographic keys. Proceed as described in steps four and five."
msgstr ""

#: ../pro/gpa.rst:35
msgid ""
"After changing both the user and the admin PIN, you are back in the Card "
"Manager window. Select \"Generate key\" in the \"Card\" menu."
msgstr ""

#: ../pro/gpa.rst ../pro/smart-policy.rst.inc:-1
msgid "img6"
msgstr ""

#: ../pro/gpa.rst:40
msgid ""
"Enter your name and e-mail address. You should keep \"backup\" enabled in"
" order to create a backup file of your cryptographic keys. Optionally you"
" might select an expiration date for your cryptographic keys."
msgstr ""

#: ../pro/gpa.rst
msgid "img7"
msgstr ""

#: ../pro/gpa.rst:45
msgid "Wait until the keys are generated successfully."
msgstr ""

#: ../pro/gpa.rst
msgid "img8"
msgstr ""

#: ../pro/gpa.rst:50
msgid ""
"Enter a strong passphrase for your backup keys. We strongly recommend to "
"store the backup file on a separate storage(e.g. CD-ROM) and on a safe "
"location."
msgstr ""

#: ../pro/gpa.rst
msgid "img9"
msgstr ""

#: ../pro/gpa.rst:55
msgid ""
"Congratulations, your Nitrokey is now ready to use. Please see the "
"`applications <https://www.nitrokey.com/documentation/applications>`__ "
"section for further information of its usage."
msgstr ""

#: ../hsm/mac/hard-disk-encryption.rst:2
#: ../hsm/windows/hard-disk-encryption.rst:2
#: ../pro/linux/hard-disk-encryption.rst:2
msgid "Hard Disk Encryption"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:6
#: ../pro/linux/hard-disk-encryption.rst:7
msgid "VeraCrypt (formerly TrueCrypt)"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:8
#: ../pro/linux/hard-disk-encryption.rst:9
msgid ""
"`VeraCrypt <https://www.veracrypt.fr/en/Home.html>`__ is a free and Open "
"Source disk encryption software for Windows, macOS, and GNU+Linux. It is "
"the successor of TrueCrypt and thus recommended, although the following "
"instructions should apply to TrueCrypt as well."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:11
msgid ""
"Follow these steps to use the program with `Nitrokey Storage 2 "
"<https://shop.nitrokey.com/shop/product/nitrokey-storage-2-56>`__ or "
"`Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product/nk-pro-2"
"-nitrokey-pro-2-3>`__:"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:12
#: ../pro/linux/hard-disk-encryption.rst:15
msgid ""
"Install the latest release of `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__, or download the `PKCS#11 "
"library <https://smartcard-auth.de/download-en.html>`__."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:15
#: ../pro/linux/hard-disk-encryption.rst:18
msgid ""
"Choose the library in VeraCrypt under Settings>Preferences>Security Token"
" (location depends on system, e.g. ``/usr/lib/opensc``)."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:17
#: ../pro/linux/hard-disk-encryption.rst:20
msgid "Generate a 64 Byte key file via Tools>Keyfile Generator."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:18
#: ../pro/linux/hard-disk-encryption.rst:21
msgid ""
"Now you should be able to import the generated key file via Tools>Manage "
"Security Token Keyfiles. You should choose the first Slot (``[0] User "
"PIN``). The keyfile is then stored on the Nitrokey as ‘Private Data "
"Object 1’ (``PrivDO1``)."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:22
#: ../pro/linux/hard-disk-encryption.rst:25
msgid "After this you should wipe the original keyfile on your Computer securely!"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:24
#: ../pro/linux/hard-disk-encryption.rst:27
msgid ""
"Now you can use VeraCrypt with the Nitrokey: Create a container, choose "
"the keyfile on the device as an alternative to a password."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:29
#: ../pro/linux/hard-disk-encryption.rst:32
msgid "Security Consideration"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:31
#: ../pro/linux/hard-disk-encryption.rst:34
msgid ""
"Please note that VeraCrypt doesn’t make use of the full security which "
"Nitrokey (and smart cards in general) offer. Instead it stores a keyfile "
"on the Nitrokey which theoretically could be stolen by a computer virus "
"after the user enters the PIN."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:36
#: ../pro/linux/hard-disk-encryption.rst:39
msgid ""
"Note: `Aloaha Crypt <https://www.aloaha.com/aloaha-crypt-disk/>`__ is "
"based on TrueCrypt/VeraCrypt but without the described security "
"limitation."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:42
msgid "Hard Disk Encryption on GNU+Linux with LUKS/dm-crypt"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:44
msgid ""
"Here are `excellent instructions <https://blog.kumina.nl/2010/07/two-"
"factor-luks-using-ubuntu/>`__ how to use Nitrokey to encrypt your hard "
"disk under GNU+Linux with LUKS/dm-crypt. `Other instructions "
"<https://wiki.ubuntu.com/SmartCardLUKSDiskEncryption>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:46
msgid ""
"Purism has created a `simple script "
"<https://docs.puri.sm/PureBoot/LibremKeyLUKS.html>`__ to add the "
"Nitrokey/LibremKey as a way to unlock LUKS partitions (not tested by "
"Nitrokey yet)."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:48
msgid ""
"`This project <https://github.com/artosan/nitroluks/>`__ aims to ease the"
" use of LUKS with the Nitrokey Pro or Storage based on the Password Safe "
"(not tested by Nitrokey yet). A description on how to use it on Gentoo "
"can be found `here <https://amedeos.github.io/gentoo/nitrokey/2019/01/21"
"/gentoo-nitrokey-luks.html>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:50
msgid ""
"For Arch Linux, see `initramfs-scencrypt <https://github.com/fuhry"
"/initramfs-scencrypt>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:53
msgid "Storage Encryption on GNU+Linux with EncFS"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:57
msgid "Prerequisite"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:59
msgid ""
"Please ensure that you `installed the device driver, changed the default "
"PINs and generated or imported keys with GnuPG "
"<https://www.nitrokey.com/start>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:63
msgid ""
"`EncFS <https://github.com/vgough/encfs>`__ is an easy to utlity for "
"encrypted file systems and it is based on `FUSE "
"<https://de.wikipedia.org/wiki/Filesystem_in_Userspace>`__. You may "
"follow these steps to use it with very long passwords and Nitrokey Pro 2:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:67
msgid "Initialization"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:69
msgid "Create a key file with random data:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:76
msgid "Encrypt the key file and use the User-ID of your Nitrokey"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:83
msgid "Remove the key file in clear text:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:90
msgid "Create mount point:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:97
msgid "Create the actual encryption folder"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:106
msgid "Unmount the new file system:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:116
msgid "Mount encrypted file system and enter PIN of Nitrokey:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:123
msgid "After usage, unmount the file system:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:131
msgid "Storage Encryption on GNU+Linux with ECryptFS"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:133
msgid ""
"`eCryptfs <https://www.ecryptfs.org/>`__ is a file based transparent "
"encryption file system for GNU+Linux which can be used with Nitrokey "
"through a PKCS#11 driver."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:135
msgid "See `these <http://tkxuyen.com/blog/?p=293>`__ instructions:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:137
msgid "Import the certificate and key to the Nitrokey"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:145
msgid "Create the file ~/.ecryptfsrc.pkcs11:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:152
msgid "Enter this content:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:164
msgid "Copy the serialized id for later usage:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:174
msgid ""
"Alternatively, try `ESOSI <https://sourceforge.net/projects/esosi/>`__ or"
" follow these steps using OpenSC and OpenVPN."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:176
msgid ""
"Source of the guide: "
"https://www.nitrokey.com/documentation/applications#a:hard-disk-"
"encryption"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:2
msgid "Importing Keys And Certificates"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:6
msgid ""
"Generally the concept to import key-pairs and/or certificates is the "
"following:"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:9
msgid "Create a DKEK (Device Key Encryption Key) share"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:10
msgid "Initialize device and enable DKEK as \"Device Encryption Scheme\""
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:11
msgid "Import DKEK share into device"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:12
msgid "Import PKCS#12 container(s) into DKEK"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:14
msgid ""
"This documentation covers only one specific use-case and should serve as "
"an example for the overall workflow. For further information please read "
"`this thread`_ and `this blog post`_."
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:20
msgid ""
"This procedure will reset your Nitrokey HSM 2 device and all data on it "
"will be deleted!"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:26
msgid ""
"make sure all the keys you would like to import are available as PKCS#12 "
"containers (`.p12`) and you know the password, if needed"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:29
msgid ""
"be sure that nothing on the used Nitrokey HSM 2 is needed, it will be "
"deleted during this procedure"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:32
msgid ""
"download the latest `Smart Card Shell`_ and unpack it into your work-"
"directory"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:35
msgid "Importing Via The SCSH3 GUI"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:37
msgid ""
"Inside the unpacked directory you will find ``scsh3gui``, which can be "
"started using ``bash scsh3gui`` (for windows double-click on: "
"``scsh3gui.cmd``)."
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:40
msgid ""
"Once the SCSH3 Tool is open, you should see your Nitrokey HSM 2 inside "
"the tree view. Please follow these steps to import:"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:43
msgid "Start key-manager (File -> Keymanager)"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:45
msgid "Right-click \"Smartcard-HSM\" -> create DKEK share"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:47
msgid "Choose file location"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:49
msgid "Choose DKEK share password"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:51
msgid "Right-click \"Smartcard-HSM\" -> Initialize device"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:53
msgid "Enter SO-PIN"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:55
msgid "(optional) Enter label and enter URL/Host"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:57
msgid "Select authentication method: \"User PIN\""
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:59
msgid ""
"Allow RESET RETRY COUNTER: \"Resetting and unblocking PIN with SO-PIN not"
" allowed\""
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:61
msgid "Enter and confirm User PIN"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:63
msgid "\"Select Device Key Encryption scheme\" -> \"DKEK shares\""
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:65
msgid "Enter number of DKEK shares: 1"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:67
msgid "Right-click DKEK set-up in progress -> \"Import DKEK share\""
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:69
msgid "Choose DKEK share file location"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:71
msgid "Password for DKEK share"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:73
msgid "Right-click \"SmartCard-HSM\" -> \"Import from PKCS#12\""
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:75
msgid "Enter number of shares -> 1"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:77
msgid "Enter file location of DKEK share"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:79
msgid "Enter Password for DKEK share"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:81
msgid "Select PKCS#12 container for import (Enter password, if set)"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:83
msgid "Select Key"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:85
msgid "Select Name to be used (This is the Label used for the key on the device)"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:87
msgid "Import more keys, if needed"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:89
msgid ""
"Once this is done, you can check that the keys have been successfully "
"imported using:"
msgstr ""

#: ../hsm/import-keys-certs.rst.inc:96
msgid ""
"In the resulting output you will find the imported keys labeled by the "
"name you chose previously."
msgstr ""

#: ../hsm/linux/index.rst:2
msgid "Nitrokey HSM with GNU/Linux"
msgstr ""

#: ../hsm/linux/index.rst:13
msgid ""
"Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__. You need at "
"least version 0.19. You can find recent builds for debian-based systems "
"like Ubuntu `here <https://github.com/Nitrokey/opensc-build>`__ if your "
"system does not have the newest version of OpenSC. Alternatively, install"
" `this <https://www.cardcontact.de/download/sc-hsm-starterkit.zip>`__ "
"driver (`source <https://github.com/CardContact/sc-hsm-embedded>`__)."
msgstr ""

#: ../hsm/linux/index.rst:20 ../hsm/mac/index.rst:17
#: ../hsm/windows/index.rst:17
msgid ""
"Define SO-PIN and PIN of your own choices. See `these instructions "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-"
"device>`__. Afterwards you can begin to `generate new keys "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#generate-key-"
"pair>`__."
msgstr ""

#: ../hsm/linux/index.rst:25 ../hsm/mac/index.rst:22
#: ../hsm/windows/index.rst:22
msgid "Your Nitrokey is now ready to use."
msgstr ""

#: ../hsm/linux/index.rst:27 ../hsm/mac/index.rst:24
#: ../hsm/windows/index.rst:24
msgid ""
"There is `nitrotool <https://github.com/johndoe31415/nitrotool>`__ as a "
"more comfortable frontend to OpenSC. (hsmwiz)"
msgstr ""

#: ../hsm/linux/index.rst:28 ../hsm/mac/index.rst:25
#: ../hsm/windows/index.rst:25
msgid ""
"Embedded Systems: For systems with minimal memory footprint a read/only "
"PKCS#11 module is provided by the `sc-hsm-embedded "
"<https://github.com/CardContact/sc-hsm-embedded>`__ project."
msgstr ""

#: ../hsm/linux/index.rst:29 ../hsm/mac/index.rst:26
#: ../hsm/windows/index.rst:26
msgid ""
"`This PKCS#11 module <https://github.com/CardContact/sc-hsm-"
"embedded/wiki/PKCS11>`__ is useful for deployments where key generation "
"at the user's workplace is not required. The PKCS#11 module also supports"
" major electronic signature cards available in the German market."
msgstr ""

#: ../hsm/linux/index.rst:30 ../hsm/mac/index.rst:27
#: ../hsm/windows/index.rst:27
msgid ""
"OpenSCDP: The SmartCard-HSM is fully integrated with `OpenSCDP "
"<https://www.openscdp.org/>`__, the open smart card development platform."
" See the `public support scripts <https://www.openscdp.org/scripts/sc-"
"hsm/jsdoc/index.html>`__ for details."
msgstr ""

#: ../hsm/linux/ipsec.rst:2
msgid "IPsec"
msgstr ""

#: ../hsm/ipsec.rst.inc:3
msgid ""
"`Strong Swan <https://www.strongswan.org/>`__ works using the `PKCS#11 "
"driver <https://www.nitrokey.com/documentation/applications#pkcs11>`__. "
"Basically follow these steps:"
msgstr ""

#: ../hsm/ipsec.rst.inc:5
msgid ""
"Generate a key on Nitrokey via pkcs11-tool. In this example it's a 4096 "
"bit RSA key."
msgstr ""

#: ../hsm/ipsec.rst.inc:11
msgid "Generate a certificate signing request via openssl + pkcs11 module"
msgstr ""

#: ../hsm/ipsec.rst.inc:19
msgid "Sign the certificate with your certificate authority"
msgstr ""

#: ../hsm/ipsec.rst.inc:21
msgid "Convert the certificate to DER"
msgstr ""

#: ../hsm/ipsec.rst.inc:27
msgid "Import  the certificate into the Nitrokey via pkcs11-tool"
msgstr ""

#: ../hsm/ipsec.rst.inc:33
msgid ""
"Configure Strongswan to load opensc-pkcs11 module then to load the "
"certificate on Nitrokey. Edit /etc/strongswan.d/charon/pkcs11.conf and "
"add the following module:"
msgstr ""

#: ../hsm/ipsec.rst.inc:44
msgid ""
"Initiate the VPN connection via IPSec/Strongswan, then prompt for "
"Nitrokey PIN"
msgstr ""

#: ../hsm/ipsec.rst.inc:46
msgid "VPN is now connected"
msgstr ""

#: ../hsm/linux/n-of-m-schemes.rst:2
msgid "N-of-m Schemes"
msgstr ""

#: ../hsm/n-of-m-schemes.rst:1
msgid ""
"The Nitrokey HSM 2 supports two different n-of-m schemes - one for secure"
" sharing of key material/passwords and one for public key authentication "
"to control the access to the device. Please see `this blog post "
"<https://www.smartcard-"
"hsm.com/2015/10/10/Shared_Control_over_Key_Usage.html>`__ for more "
"detailed information."
msgstr ""

#: ../hsm/n-of-m-schemes.rst:4
msgid "N-of-m for DKEK Shares"
msgstr ""

#: ../hsm/n-of-m-schemes.rst:6
msgid ""
"This feature can be used with OpenSC as described `here "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#using-key-backup-and-"
"restore>`__. The general approach is seen in the videos below (external "
"links)."
msgstr ""

#: ../hsm/n-of-m-schemes.rst:8
msgid "Nitrokey HSM's Secure Key Backup and Restore:"
msgstr ""

#: ../hsm/n-of-m-schemes.rst:17
msgid ""
"<script id=\"asciicast-152957\" src=\"https://asciinema.org/a/152957.js\""
" async></script>"
msgstr ""

#: ../hsm/n-of-m-schemes.rst:20
msgid ""
"<iframe width=\"560\" height=\"315\" "
"src=\"https://asciinema.org/a/152957\" frameborder=\"0\" "
"allowfullscreen></iframe>"
msgstr ""

#: ../hsm/n-of-m-schemes.rst:22
msgid "Nitrokey HSM's M-of-N Threshold Scheme:"
msgstr ""

#: ../hsm/n-of-m-schemes.rst:30
msgid ""
"<iframe width=\"560\" height=\"315\" "
"src=\"https://asciinema.org/a/153021\" frameborder=\"0\" "
"allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>"
msgstr ""

#: ../hsm/n-of-m-schemes.rst:33
msgid "N-of-m for public key authentication"
msgstr ""

#: ../hsm/n-of-m-schemes.rst:35
msgid ""
"So far n-of-m authentication is only supported in OpenSCDP. `The blog "
"post <https://www.smartcard-"
"hsm.com/2015/10/10/Shared_Control_over_Key_Usage.html>`__ gives an "
"overview and a how-to `here "
"<https://devnet.cardcontact.de/documents/7>`__ (CDN access required) is "
"shown the process step by step in the Smart Card Shell."
msgstr ""

#: ../hsm/n-of-m-schemes.rst:37
msgid ""
"N-of-m authentication is also supported in the `PKI-as-a-Service Portal "
"<https://www.smartcard-hsm.com/2018/02/13/pki-as-a-service.html>`__ for "
"locally and remote connected HSMs. The PKI-as-a-Service Portal is based "
"on OpenSCDP."
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:2
msgid "PKCS#11 URL Generation"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:7
msgid ""
"Various applications use openssl to handle e.g., TLS certificates. This "
"concept mostly allows simply replacing a file-path (for the secret) with "
"a so-called **PKCS#11 URL** to use a secret from a e.g., Nitrokey."
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:14
msgid "ensure ``openssl`` is installed"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:16
msgid ""
"ensure ``openssl`` can use the PKCS#11 engine by installing ``libengine-"
"pkcs11-openssl``"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:25
msgid "install ``opensc`` and ``gnutls-bin`` for necessary tools"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:27
msgid ""
"verify that your needed keys and/or certificates are available on your "
"Nitrokey using ``pkcs15-tool -D``"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:29
msgid ""
"if you want to use ECC keys/mechanisms through ``libengine-"
"pkcs11-openssl``, you'll have to ensure its version is at least 0.4.10"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:33
msgid "List and Generate PKCS#11 URLs"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:35
msgid "Use the following command to get a list of available tokens (Nitrokeys):"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:42
msgid ""
"Choose the token (Nitrokey) URL you want to generate URL tokens for and "
"use it like this:"
msgstr ""

#: ../hsm/pkcs11-url.rst.inc:51
msgid ""
"If you inspect the tail of the URL you'll recognize: ``label``, ``id`` "
"and more, these can be partly removed as long as the necessary objects "
"can be uniquely identified using the resulting URL, see :doc:`TLS Apache2"
" Configuration<apache2-tls>` for an example using ``id`` only."
msgstr ""

#: ../hsm/smime.rst.inc:2
msgid "S/MIME Email Encryption"
msgstr ""

#: ../hsm/smime.rst.inc:7 ../pro/smime-outlook.rst.inc:7
#: ../pro/smime-thunderbird.rst.inc:7
msgid "Prerequisites"
msgstr ""

#: ../hsm/smime.rst.inc:9
msgid "There are two widely used standards for email encryption."
msgstr ""

#: ../hsm/smime.rst.inc:11
msgid "OpenPGP/GnuPG is popular among individuals,"
msgstr ""

#: ../hsm/smime.rst.inc:13
msgid "S/MIME/X.509 is mostly used by enterprises."
msgstr ""

#: ../hsm/smime.rst.inc:15
msgid ""
"The Nitrokey HSM 2 currently supports the S/MIME/X.509 standard. This "
"page describes the usage of S/MIME email encryption."
msgstr ""

#: ../hsm/smime.rst.inc:17
msgid ""
"You need to purchase a S/MIME certificate (e.g. at `CERTUM "
"<https://www.certum.eu/en/cert_offer_cert_id/>`__) or may already got one"
" by your company. Furthermore, you need to install `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While "
"GNU/Linux users usually can install OpenSC over the package manager (e.g."
" ``sudo apt install opensc`` on Ubuntu), macOS and Windows users can "
"download the installation files from the `OpenSC "
"<https://github.com/OpenSC/OpenSC/releases>`__ page."
msgstr ""

#: ../hsm/smime.rst.inc:20
msgid "Import Existing Key and Certificate"
msgstr ""

#: ../hsm/smime.rst.inc:2 ../hsm/smime.rst.inc:22
msgid ""
"The following instructions are based on the `wiki of OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`__. We will assume, "
"that you already got a key-certificate pair as a .p12 file. Please have a"
" look at the wiki page, if you got a separate key and certificate file."
msgstr ""

#: ../hsm/smime.rst.inc:4 ../hsm/smime.rst.inc:24
msgid ""
"To open the Windows command line please push the Windows-key and R-key. "
"Now type ‘cmd.exe’ in the text field and hit enter. To open a Terminal on"
" macOS or GNU/Linux please use the application search (e.g. spotlight on "
"macOS)."
msgstr ""

#: ../hsm/smime.rst.inc:6 ../hsm/smime.rst.inc:26
msgid ""
"To make these commands as simple as possible, the .p12 file needs to be "
"in your home folder. On Windows this is usually "
"``C:\\Users\\yourusername`` and on macOS and GNU/Linux system it will be "
"``/home/yourusername``. If you do not store the .p12 file there, you have"
" to adapt the path in the commands below. Please plug in the Nitrokey "
"before submitting the commands."
msgstr ""

#: ../hsm/smime.rst.inc:8 ../hsm/smime.rst.inc:28
msgid ""
"Assuming that your key-certificate file reads ‘myprivate.p12’ the "
"commands for Windows looks like this:"
msgstr ""

#: ../hsm/smime.rst.inc:15 ../hsm/smime.rst.inc:35
msgid "and on macOS and GNU/Linux it will be"
msgstr ""

#: ../hsm/smime.rst.inc:22 ../hsm/smime.rst.inc:42
msgid ""
"The two commands copy the key-certificate pair to the slot 2 (needed for "
"decrypting emails) and slot 3 (needed for signing). The output looks on "
"both systems something like this:"
msgstr ""

#: ../hsm/smime.rst.inc:29 ../hsm/smime.rst.inc:49
msgid ""
"Please note that there will be error messages that can be safely ignored "
"(see output example above). You now have the key-certificate pair loaded "
"on the Nitrokey."
msgstr ""

#: ../hsm/smime.rst.inc:34 ../hsm/smime.rst.inc:54
msgid "You can find further information about the usage on these pages:"
msgstr ""

#: ../hsm/smime.rst.inc:36 ../hsm/smime.rst.inc:56
msgid "for using `S/MIME encryption on Thunderbird <smime-thunderbird.html>`_"
msgstr ""

#: ../hsm/smime.rst.inc:39 ../hsm/smime.rst.inc:59
msgid "for using `S/MIME encryption on Outlook <smime-outlook.html>`_"
msgstr ""

#: ../hsm/smime.rst.inc:42 ../hsm/smime.rst.inc:62
msgid ""
"for using `Evolution <https://help.gnome.org/users/evolution/stable/mail-"
"encryption.html.en>`__, an email client for the Gnome Desktop on Linux "
"systems"
msgstr ""

#: ../pro/smime-outlook.rst.inc:2
msgid "S/MIME Email Encryption with Outlook"
msgstr ""

#: ../pro/smime-outlook.rst.inc:9
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet, please look at `this page <smime.html>`_ first."
msgstr ""

#: ../pro/smime-outlook.rst.inc:11
msgid ""
"You need to have OpenSC installed on your System. Please have a look at "
"the `wiki page of the OpenSC project "
"<https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../hsm/windows/smime.rst:5 ../pro/smime-outlook.rst.inc:15
#: ../pro/smime-thunderbird.rst.inc:15
msgid ""
"Windows users with 64-bit system (standard) need to install both, the "
"32-bit and the 64-bit version of OpenSC!"
msgstr ""

#: ../pro/smime-outlook.rst.inc:19
msgid "Settings in Outlook"
msgstr ""

#: ../pro/smime-outlook.rst.inc:21
msgid ""
"Before you can use the Nitrokey in Outlook you have to activate S/MIME "
"encryption. You can achieve this by clicking on to ‘Start’ -> ‘Options’ "
"and clicking on ‘Trust Center’ in the options window. In section ‘Email "
"Security’ you can choose your S/MIME identity. Your certificate should "
"already be recognized by Outlook."
msgstr ""

#: ../pro/smime-outlook.rst.inc:36
msgid ""
"When composing a mail you can now choose to encrypt and sign the message "
"in the ‘Options’ ribbon of the compose window."
msgstr ""

#: ../pro/smime-outlook.rst.inc:43
msgid ""
"Outlook will only encrypt message to mail addresses which are saved in "
"your address book. So make sure, that the persons you want to write an "
"encrypted mail to have an entry in Outlook’s contacts. You can ask the "
"person to write you a signed mail, so that you can import the certificate"
" information."
msgstr ""

#: ../pro/smime-outlook.rst.inc:45
msgid ""
"Depending on your certificate or the certificate of your partners you may"
" have to import a so-called root certificate. This is the certificate of "
"the party which issued the certificate you or your partner uses. You "
"should usually got informed if this is necessary."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:2
msgid "S/MIME Email Encryption with Thunderbird"
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:9
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet or if you did not installed OpenSC, please look at `this "
"page <smime.html>`_ first."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:11
msgid ""
"You need to have `OpenSC installed "
"<https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While "
"GNU/Linux users usually can install OpenSC over the package manager (e.g."
" ``sudo apt update && sudo apt install opensc`` on Ubuntu), macOS and "
"Windows users can download the installation files from OpenSC directly."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:19
msgid "Settings in Thunderbird"
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:21
msgid ""
"Before you can use the Nitrokey in Thunderbird you have to activate "
"S/MIME encryption in the account settings. You can achieve this by "
"clicking on the menu and go to ‘Preferences’ -> ‘Account Settings’ and "
"clicking on ‘Security’ in the account settings window."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:28
msgid ""
"Click on “Security Devices” to import the right PCKS11 module. Click on "
"“Load” on the right-hand side. Now give the Module a name (like “OpenSC "
"Module”) and click on “Browse” to choose the location of the Module (see "
"below)."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:35
msgid ""
"On Windows the right file lays under “C:\\Windows\\System32\\opensc-"
"pkcs11.dll”. On macOS and GNU/Linux the file should be in “/lib/pkcs11"
"/opensc-pkcs11.so” or “/usr/lib/pkcs11/opensc-pkcs11.so” or alike. Press "
"“OK” twice and you are back in security section of the account settings. "
"Now you can actually choose a certificate on the upper part of the "
"window. You should get asked for a PIN to unlock your Nitrokey. Please "
"type in your User PIN."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:45
msgid ""
"When composing an email you can now choose to encrypt and sign the "
"message."
msgstr ""

#: ../hsm/linux/stunnel.rst:2
msgid "Stunnel"
msgstr ""

#: ../hsm/stunnel.rst.inc:3
msgid ""
"`Stunnel <https://www.stunnel.org/>`__ works as an SSL encryption wrapper"
" between remote client and local (inetd-startable) or remote server. It "
"can be used to add SSL functionality to commonly used inetd daemons like "
"POP2, POP3, and IMAP servers without any changes in the programs' code."
msgstr ""

#: ../hsm/stunnel.rst.inc:5
msgid "Stunnel is able to load OpenSC PKCS#11 engine using this configuration:"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:10
msgid ""
"Follow these steps to use the program with `Nitrokey "
"<https://shop.nitrokey.com/>`__:"
msgstr ""

#: ../hsm/mac/index.rst:2
msgid "Nitrokey HSM with macOS"
msgstr ""

#: ../hsm/mac/index.rst:13 ../hsm/windows/index.rst:13
msgid ""
"Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__. "
"Alternatively, install `this <https://www.cardcontact.de/download/sc-hsm-"
"starterkit.zip>`__ driver (`source <https://github.com/CardContact/sc-"
"hsm-embedded>`__)."
msgstr ""

#: ../hsm/windows/index.rst:2
msgid "Nitrokey HSM With Windows"
msgstr ""

#: ../pro/smart-policy.rst.inc:2
msgid "Login to Windows Domain Computers With MS Active Directory"
msgstr ""

#: ../pro/smart-policy.rst.inc:6
msgid ""
"Download and install the latest `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/smart-policy.rst.inc:8
msgid ""
"Use a text editor to add the following settings to ``C:\\Program "
"Files:\\OpenSC Project\\OpenSC\\opensc.conf``."
msgstr ""

#: ../pro/smart-policy.rst.inc:47
msgid ""
"Open a command terminal and enter “regedit”. Use regedit to import `this "
"file <https://www.nitrokey.com/sites/default/files/nk-hsm.reg>`__."
msgstr ""

#: ../pro/smart-policy.rst.inc:50
msgid ""
"Now you can enroll Nitrokeys for your users managed in Microsoft Active "
"Directory. You may either use Microsoft PKI, `gpgsm "
"<https://www.gnupg.org/documentation/manuals/gnupg/Howto-Create-a-Server-"
"Cert.html>`__, or `Smart Policy <https://www.mysmartlogon.com/products"
"/smart-policy.html>`__. The following steps describe the usage of Smart "
"Policy."
msgstr ""

#: ../pro/smart-policy.rst.inc:56
msgid ""
"`Download "
"<https://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203.exe>`__"
" and install Smart Policy."
msgstr ""

#: ../pro/smart-policy.rst.inc:58
msgid "Select “Read a smart card”"
msgstr ""

#: ../pro/smart-policy.rst.inc:65
msgid "Select the certificate, mapping, and user."
msgstr ""

#: ../pro/smart-policy.rst.inc:72
msgid "Verify the device status via CRL."
msgstr ""

#: ../pro/smart-policy.rst.inc:79
msgid "Choose a Group Policy Object (GPO)."
msgstr ""

#: ../pro/smart-policy.rst.inc:86
msgid "Confirm applying the mapping."
msgstr ""

#: ../pro/smart-policy.rst.inc:93
msgid ""
"From now on, when logging on to your Windows computer you need to connect"
" the Nitrokey and enter your PIN."
msgstr ""

