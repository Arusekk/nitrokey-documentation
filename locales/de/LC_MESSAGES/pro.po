# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-11 10:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../pro/faq.rst:2
msgid "Nitrokey Pro 2 FAQ"
msgstr ""

#: ../shared-faqs/nitrokeys.rst.inc:2
msgid "**Q:** Which Operating Systems are supported?"
msgstr ""

#: ../shared-faqs/nitrokeys.rst.inc:2
msgid "Windows, Linux and macOS."
msgstr ""

#: ../shared-faqs/nitrokeys.rst.inc:7
msgid "**Q:** What can I use the Nitrokey for?"
msgstr ""

#: ../shared-faqs/nitrokeys.rst.inc:5
msgid ""
"See the `overview <https://www.nitrokey.com/products/nitrokeys>`_ of "
"supported use cases."
msgstr ""

#: ../pro/faq.rst:12
msgid "**Q:** What are the default PINs?"
msgstr ""

#: ../pro/faq.rst:8
msgid "**User PIN:** \"123456\""
msgstr ""

#: ../pro/faq.rst:9
msgid "**Administrator PIN:** \"12345678\""
msgstr ""

#: ../pro/faq.rst:11
msgid ""
"We strongly recommend to change these PINs/password to user-chosen values"
" before using the Nitrokey."
msgstr ""

#: ../shared-faqs/pins.rst.inc:11
msgid "**Q:** What is the maximum length of the PIN?"
msgstr ""

#: ../shared-faqs/pins.rst.inc:3
msgid ""
"Nitrokey uses PINs instead of passwords. The main difference is that the "
"hardware limits the amount of tries to three while a limit doesn't exist "
"for passwords. Because of this, a short PIN is still secure and there is "
"not need to choose a long and complex PIN."
msgstr ""

#: ../shared-faqs/pins.rst.inc:8
msgid ""
"Nitrokey Storage's PINs can be up to 20 digits long and can consist of "
"numbers, characters and special characters. Note: When using GnuPG or "
"OpenSC, 32 character long PINs can be used but aren't supported by "
"Nitrokey App."
msgstr ""

#: ../shared-faqs/pins.rst.inc:22
msgid "**Q:** What is the User PIN for?"
msgstr ""

#: ../shared-faqs/pins.rst.inc:14
msgid ""
"The user PIN is at least 6-digits long and is used to get access to the "
"contect of the Nitrokey. This is the PIN you will use a lot in every day "
"use e.g. for decrypting messages, for unlocking your encrypted storage "
"(NK Storage only) etc."
msgstr ""

#: ../shared-faqs/pins.rst.inc:19
msgid ""
"The user PIN can have up to 20 digits and other characters (e.g. "
"alphabetic and special characters). But as the user PIN is blocked as "
"soon three wrong PIN attempts were done, it is sufficiently secure to "
"only have a 6 digits PIN. The default PIN is 123456."
msgstr ""

#: ../shared-faqs/pins.rst.inc:34
msgid "**Q:** What is the Admin PIN for?"
msgstr ""

#: ../shared-faqs/pins.rst.inc:25
msgid ""
"The admin PIN is at least 8-digits long and is used to change "
"contents/settings of the Nitrokey. That is to say after initializing the "
"Nitrokey you probably won't need this PIN too often (e.g. if you want to "
"add another password to the password safe of the Nitrokey Pro or Nitrokey"
" Storage)."
msgstr ""

#: ../shared-faqs/pins.rst.inc:31
msgid ""
"The admin PIN can have up to 20 digits and other characters (e.g. "
"alphabetic and special characters). But as the admin PIN is blocked as "
"soon three wrong PIN attempts were done, it is sufficiently secure to "
"only have 8 digits PIN. The default PIN is 12345678."
msgstr ""

#: ../pro/faq.rst:19
msgid ""
"**Q:** Why does my Nitrokey Pro hang when switching between nitrokey-app "
"and GnuPG?"
msgstr ""

#: ../pro/faq.rst:17
msgid ""
"GnuPG and nitrokey-app sometimes tend to hand each other. This is a known"
" problem and it can be fixed by re-inserting the Nitrokey into the USB "
"slot."
msgstr ""

#: ../pro/faq.rst:33
msgid "**Q:** Which drivers/tools can be used?"
msgstr ""

#: ../pro/faq.rst:22
msgid ""
"GnuPG is required for many use cases. It is a command line tool but "
"usually you don't need to invoke it directly but use another application "
"with user interface."
msgstr ""

#: ../pro/faq.rst:26
msgid ""
"Don't use GnuPG in parallel with OpenSC or another PKCS#11 driver because"
" both may interfere and unexpected issues may result."
msgstr ""

#: ../pro/faq.rst:28
msgid ""
"Install GPG4Win which contains Gnu Privacy Assistant (GPA) and GnuPG "
"(GPG). Start Gnu Privacy Assistant (GPA) or another application such as "
"your email client to use GnuPG. Advanced users could use GnuPG directly "
"(command line). Please note: The Fellowship smart card is similar to the "
"Nitrokey Pro so that this instructions work Nitrokey as well. In general "
"the official documentation is recommended."
msgstr ""

#: ../pro/faq.rst:42
msgid "**Q:** How fast is encryption and signing?"
msgstr ""

#: ../pro/faq.rst:36
msgid "Encryption of 50kiB of data:"
msgstr ""

#: ../pro/faq.rst:38
msgid "256 bit AES, 2048 bytes per command -> 880 bytes per second"
msgstr ""

#: ../pro/faq.rst:39
msgid "128 bit AES, 2048 bytes per command -> 893 bytes per second"
msgstr ""

#: ../pro/faq.rst:40
msgid "256 bit AES, 240 bytes per command -> 910 bytes per second"
msgstr ""

#: ../pro/faq.rst:41
msgid "128 bit AES, 240 bytes per command -> 930 bytes per second"
msgstr ""

#: ../shared-faqs/algos.rst.inc:3
msgid "**Q:** Which algorithms and maximum key length are supported?"
msgstr ""

#: ../shared-faqs/algos.rst.inc:3
msgid "See the following table:"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:191 ../shared-faqs/algos.rst.inc:6
msgid "Start"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:191 ../shared-faqs/algos.rst.inc:6
msgid "Pro + Storage"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:191 ../shared-faqs/algos.rst.inc:6
msgid "Pro 2 + Storage 2"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "Nitrokey 3"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "HSM"
msgstr ""

#: ../shared-faqs/algos.rst.inc:6
msgid "HSM 2"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:193 ../shared-faqs/algos.rst.inc:8
msgid "rsa1024"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:193
#: ../pro/openpgp-keygen-on-device.rst.inc:194
#: ../pro/openpgp-keygen-on-device.rst.inc:195
#: ../pro/openpgp-keygen-on-device.rst.inc:196
#: ../pro/openpgp-keygen-on-device.rst.inc:197
#: ../pro/openpgp-keygen-on-device.rst.inc:198
#: ../pro/openpgp-keygen-on-device.rst.inc:199
#: ../pro/openpgp-keygen-on-device.rst.inc:200 ../shared-faqs/algos.rst.inc:8
#: ../shared-faqs/algos.rst.inc:10 ../shared-faqs/algos.rst.inc:12
#: ../shared-faqs/algos.rst.inc:14 ../shared-faqs/algos.rst.inc:16
#: ../shared-faqs/algos.rst.inc:18 ../shared-faqs/algos.rst.inc:20
#: ../shared-faqs/algos.rst.inc:22 ../shared-faqs/algos.rst.inc:24
#: ../shared-faqs/algos.rst.inc:26 ../shared-faqs/algos.rst.inc:28
#: ../shared-faqs/algos.rst.inc:30 ../shared-faqs/algos.rst.inc:32
#: ../shared-faqs/algos.rst.inc:34
msgid "✓"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:194 ../shared-faqs/algos.rst.inc:10
msgid "rsa2048"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:195 ../shared-faqs/algos.rst.inc:12
msgid "rsa3072"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:196 ../shared-faqs/algos.rst.inc:14
msgid "rsa4096"
msgstr ""

#: ../shared-faqs/algos.rst.inc:16
msgid "curve25519"
msgstr ""

#: ../shared-faqs/algos.rst.inc:18
msgid "NIST-P 192"
msgstr ""

#: ../shared-faqs/algos.rst.inc:20
msgid "NIST-P 256"
msgstr ""

#: ../shared-faqs/algos.rst.inc:22
msgid "NIST-P 384-521"
msgstr ""

#: ../shared-faqs/algos.rst.inc:24
msgid "Brainpool 192"
msgstr ""

#: ../shared-faqs/algos.rst.inc:26
msgid "Brainpool 256-320"
msgstr ""

#: ../shared-faqs/algos.rst.inc:28
msgid "Brainpool 384-521"
msgstr ""

#: ../shared-faqs/algos.rst.inc:30
msgid "secp192"
msgstr ""

#: ../shared-faqs/algos.rst.inc:32
msgid "secp256"
msgstr ""

#: ../shared-faqs/algos.rst.inc:34
msgid "secp521"
msgstr ""

#: ../pro/faq.rst:48
msgid ""
"**Q:** Does the Nitrokey Pro contain a secure chip or just a normal "
"microcontroller?"
msgstr ""

#: ../pro/faq.rst:48
msgid "Nitrokey Pro contains a tamper resistant smart card."
msgstr ""

#: ../pro/faq.rst:54
msgid "**Q:** Is the Nitrokey Pro Common Criteria or FIPS certified?"
msgstr ""

#: ../pro/faq.rst:51
msgid ""
"The security controller (NXP Smart Card Controller P5CD081V1A and its "
"major configurations P5CC081V1A, P5CN081V1A, P5CD041V1A, P5CD021V1A and "
"P5CD016V1A each with IC dedicated Software) is Common Criteria EAL 5+ "
"certified up to the OS level (`Certification Report "
"<https://commoncriteriaportal.org/files/epfiles/0555a_pdf.pdf>`__, "
"`Security Target "
"<https://commoncriteriaportal.org/files/epfiles/0555b_pdf.pdf>`__, "
"`Maintenance Report "
"<https://commoncriteriaportal.org/files/epfiles/0555_ma1a_pdf.pdf>`__, "
"`Maintenance ST "
"<https://commoncriteriaportal.org/files/epfiles/0555_ma1b_pdf.pdf>`__)."
msgstr ""

#: ../pro/faq.rst:58
msgid ""
"**Q:** How can I use the True Random Number Generator (TRNG) of the "
"Nitrokey Pro for my applications?"
msgstr ""

#: ../pro/faq.rst:57
msgid ""
"Both devices are compatible to the OpenPGP Card, so that `scdrand`_ "
"should work. `This script`_ may be useful. The user comio `created a "
"systemd file`_ to use scdrand and thus the TRNG more generally. He "
"created an `ebuild for Gentoo`_, too."
msgstr ""

#: ../pro/faq.rst:65
msgid "**Q:** How good is the Random Number Generator?"
msgstr ""

#: ../pro/faq.rst:61
msgid ""
"Nitrokey Pro and Nitrokey Storage use a True Random Number Generator "
"(TRNG) for generating keys on the device. The entropy generated by the "
"TRNG is used for the entire key length. Therefore the TRNG is compliant "
"to `BSI TR-03116`_."
msgstr ""

#: ../pro/faq.rst:65
msgid "The TRNG provides about 40 kbit/s."
msgstr ""

#: ../pro/faq.rst:69
msgid "**Q:** How large is the storage capacity?"
msgstr ""

#: ../pro/faq.rst:68
msgid ""
"The Nitrokey Pro doesn't contain storage capability for ordinary data (it"
" can only store cryptographic keys and certificates)."
msgstr ""

#: ../pro/gpa.rst:2
msgid "Setup With Gnu Privacy Assistant (GPA)"
msgstr ""

#: ../pro/gpa.rst:4
msgid ""
"This document describes how to use Gnu Privacy Assistant (GPA) to set up "
"the Nitrokey for its first usage."
msgstr ""

#: ../pro/gpa.rst:6
msgid ""
"First you need to install Gnu Privacy Assistant (GPA). For Windows you "
"should download and install the `GPG4Win <https://www.gpg4win.org/>`__ "
"package which contains GPA. For Linux you should install the GPA package "
"of your distribution (e.g. on Ubuntu: sudo apt-get install gpa )."
msgstr ""

#: ../pro/gpa.rst:8
msgid ""
"Start GPA and select the Card Manager; either by pressing the icon at the"
" top or by choosing Card Manager in the Windows menu."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/change-pins.rst.inc:-1
#: ../pro/eidauthenticate.rst.inc:-1 ../pro/gpa.rst
#: ../pro/linux/disk-encryption-luks.rst:-1
#: ../pro/openpgp-keygen-gpa.rst.inc:-1 ../pro/openpgp-outlook.rst.inc:-1
#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/otp.rst.inc:-1
#: ../pro/putty.rst.inc:-1 ../pro/smart-policy.rst.inc:-1
#: ../pro/smime-outlook.rst.inc:-1 ../pro/smime-thunderbird.rst.inc:-1
#: ../pro/smime.rst.inc:-1 ../pro/windows/2fa-microsoft.rst:-1
#: ../pro/windows/openpgp-csp.rst:-1 ../pro/windows/openvpn-viscosity.rst
msgid "img1"
msgstr ""

#: ../pro/gpa.rst:13
msgid ""
"The window of the Card Manager will appear. Enter your salutation, name "
"and optional other information. While doing so you might be asked to "
"enter the admin PIN."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/change-pins.rst.inc:-1
#: ../pro/eidauthenticate.rst.inc:-1 ../pro/gpa.rst
#: ../pro/linux/disk-encryption-luks.rst:-1
#: ../pro/openpgp-keygen-gpa.rst.inc:-1 ../pro/openpgp-outlook.rst.inc:-1
#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/otp.rst.inc:-1
#: ../pro/putty.rst.inc:-1 ../pro/smart-policy.rst.inc:-1
#: ../pro/smime-outlook.rst.inc:-1 ../pro/smime-thunderbird.rst.inc:-1
#: ../pro/windows/2fa-microsoft.rst:-1 ../pro/windows/openpgp-csp.rst:-1
#: ../pro/windows/openvpn-viscosity.rst
msgid "img2"
msgstr ""

#: ../pro/gpa.rst:18
msgid "Confirm this window and enter the admin PIN in the next window."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/change-pins.rst.inc:-1
#: ../pro/eidauthenticate.rst.inc:-1 ../pro/gpa.rst
#: ../pro/linux/disk-encryption-luks.rst:-1
#: ../pro/openpgp-keygen-gpa.rst.inc:-1 ../pro/openpgp-outlook.rst.inc:-1
#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/otp.rst.inc:-1
#: ../pro/putty.rst.inc:-1 ../pro/smart-policy.rst.inc:-1
#: ../pro/smime-outlook.rst.inc:-1 ../pro/smime-thunderbird.rst.inc:-1
#: ../pro/windows/2fa-microsoft.rst:-1 ../pro/windows/openpgp-csp.rst:-1
#: ../pro/windows/openvpn-viscosity.rst
msgid "img3"
msgstr ""

#: ../pro/gpa.rst:23
msgid ""
"In the Card Manager window you might need to scroll down until you see "
"the buttons to change the PINs. The term PIN is used interchangeable with"
" \"password\". Press the first button \"Change PIN\" in order to change "
"the user password. Read and confirm the following information window."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/change-pins.rst.inc:-1
#: ../pro/eidauthenticate.rst.inc:-1 ../pro/gpa.rst
#: ../pro/openpgp-keygen-gpa.rst.inc:-1 ../pro/openpgp-outlook.rst.inc:-1
#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/otp.rst.inc:-1
#: ../pro/putty.rst.inc:-1 ../pro/smart-policy.rst.inc:-1
#: ../pro/smime-thunderbird.rst.inc:-1 ../pro/windows/2fa-microsoft.rst:-1
#: ../pro/windows/openpgp-csp.rst:-1 ../pro/windows/openvpn-viscosity.rst
msgid "img4"
msgstr ""

#: ../pro/gpa.rst:28
msgid ""
"Choose and enter your own PIN with a minimum length of six characters. "
"This PIN is required for the daily usage of the Nitrokey."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/eidauthenticate.rst.inc:-1
#: ../pro/gpa.rst ../pro/linux/disk-encryption-luks.rst:-1
#: ../pro/openpgp-keygen-gpa.rst.inc:-1 ../pro/openpgp-thunderbird.rst.inc:-1
#: ../pro/otp.rst.inc:-1 ../pro/putty.rst.inc:-1 ../pro/smart-policy.rst.inc:-1
#: ../pro/windows/2fa-microsoft.rst:-1 ../pro/windows/openpgp-csp.rst:-1
msgid "img5"
msgstr ""

#: ../pro/gpa.rst:33
msgid ""
"Go back to the Card Manager window in step three. This time you choose "
"the third button Change PIN in order to change the admin PIN. The admin "
"PIN is required to change the information on the Nitrokey and to change "
"the cryptographic keys. Proceed as described in steps four and five."
msgstr ""

#: ../pro/gpa.rst:35
msgid ""
"After changing both the user and the admin PIN, you are back in the Card "
"Manager window. Select \"Generate key\" in the \"Card\" menu."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/eidauthenticate.rst.inc:-1
#: ../pro/gpa.rst ../pro/linux/disk-encryption-luks.rst:-1
#: ../pro/openpgp-keygen-gpa.rst.inc:-1 ../pro/openpgp-thunderbird.rst.inc:-1
#: ../pro/otp.rst.inc:-1 ../pro/putty.rst.inc:-1 ../pro/smart-policy.rst.inc:-1
#: ../pro/windows/2fa-microsoft.rst:-1 ../pro/windows/openpgp-csp.rst:-1
msgid "img6"
msgstr ""

#: ../pro/gpa.rst:40
msgid ""
"Enter your name and e-mail address. You should keep \"backup\" enabled in"
" order to create a backup file of your cryptographic keys. Optionally you"
" might select an expiration date for your cryptographic keys."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/eidauthenticate.rst.inc:-1
#: ../pro/gpa.rst ../pro/openpgp-keygen-gpa.rst.inc:-1
#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/otp.rst.inc:-1
#: ../pro/putty.rst.inc:-1 ../pro/windows/2fa-microsoft.rst:-1
#: ../pro/windows/openpgp-csp.rst:-1
msgid "img7"
msgstr ""

#: ../pro/gpa.rst:45
msgid "Wait until the keys are generated successfully."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/eidauthenticate.rst.inc:-1
#: ../pro/gpa.rst ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/otp.rst.inc:-1
#: ../pro/windows/2fa-microsoft.rst:-1 ../pro/windows/openpgp-csp.rst:-1
msgid "img8"
msgstr ""

#: ../pro/gpa.rst:50
msgid ""
"Enter a strong passphrase for your backup keys. We strongly recommend to "
"store the backup file on a separate storage(e.g. CD-ROM) and on a safe "
"location."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:-1 ../pro/eidauthenticate.rst.inc:-1
#: ../pro/gpa.rst ../pro/openpgp-thunderbird.rst.inc:-1
#: ../pro/windows/2fa-microsoft.rst:-1 ../pro/windows/openpgp-csp.rst:-1
msgid "img9"
msgstr ""

#: ../pro/gpa.rst:55
msgid ""
"Congratulations, your Nitrokey is now ready to use. Please see the "
"`applications <https://www.nitrokey.com/documentation/applications>`__ "
"section for further information of its usage."
msgstr ""

#: ../pro/index.rst:9
msgid "Frequently Asked Questions"
msgstr ""

#: ../pro/index.rst:17
msgid "Windows"
msgstr ""

#: ../pro/index.rst:17
msgid "macOS"
msgstr ""

#: ../pro/index.rst:17
msgid "Linux"
msgstr ""

#: ../pro/index.rst:2
msgid "Nitrokey Pro 2"
msgstr ""

#: ../pro/index.rst:7
msgid "First check the:"
msgstr ""

#: ../pro/index.rst:15
msgid "or choose your operating system:"
msgstr ""

#: ../pro/2fa-google.rst.inc:2
msgid "Two-factor Authentication for Google"
msgstr ""

#: ../pro/2fa-google.rst.inc:6
msgid ""
"These are the basic steps for registering the Nitrokey Pro or Nitrokey "
"Storage as a second factor of a Google account:"
msgstr ""

#: ../pro/2fa-google.rst.inc:8
msgid ""
"Go to `https://myaccount.google.com/security#signin "
"<https://myaccount.google.com/intro/security>`__"
msgstr ""

#: ../pro/2fa-google.rst.inc:11
msgid "Click “2-Step Verification” on the right side"
msgstr ""

#: ../pro/2fa-google.rst.inc:13
msgid ""
"You need to define a first 2-Step Verfication (e.g. your phone number) "
"method to have access to the alternative second step option (the first "
"2-Step Verification can’t be the security key)"
msgstr ""

#: ../pro/2fa-google.rst.inc:17
msgid ""
"Choose “Authenticator App” as second step (though you won’t actually need"
" the app)"
msgstr ""

#: ../pro/2fa-google.rst.inc:20
msgid ""
"Choose Android -> press on “Can’t scan it” below the qrcode to see the "
"secret key"
msgstr ""

#: ../pro/2fa-google.rst.inc:23
msgid ""
"Copy the key (you can ignore the whitespaces, they do not get copied "
"anyway!) and paste the key into the corresponding field in the Nitrokey "
"App"
msgstr ""

#: ../pro/2fa-google.rst.inc:27
msgid ""
"Click “Next” and follow the instructions (but you use the Nitrokey App "
"instead of the Google Authenticator app to generate the keys)"
msgstr ""

#: ../pro/2fa-google.rst.inc:30
msgid ""
"It is possible to use the same secret key for the Google Autenticator app"
" and the Nitrokey App as well. Just make sure to follow the above "
"procedure and use the qrcode for the Authenticator app afterwards before "
"clicking “Next”. Now you can use either the Google Authenticator app or "
"the Nitrokey App."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:2
msgid "Two-factor Authentication for Nextcloud accounts"
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:6
msgid ""
"These are the basic steps for registering the Nitrokey Pro or Nitrokey "
"Storage as a second factor of a Nextcloud account."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:8
msgid ""
"At first, log in to your Nextcloud account, click on the top right symbol"
" of your account and open the settings menu."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:15
msgid "Now choose “Security” on the left hand side."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:22
msgid ""
"Now you can tick the box reading “Enable TOTP”. There is shown the TOTP "
"secret which we need to add to our Nitrokey via the Nitrokey App."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:29
msgid "Copy and save secret code into the Nitrokey App."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:41
msgid ""
"Now we request a one-time password for the Nextcloud to verify the "
"process by inserting the password on the website and pressing “verify”."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:53
msgid ""
"From now on, when signing in you need an OTP additionally to your "
"password. Get one by the Nitrokey App like before and insert it in when "
"logging in."
msgstr ""

#: ../pro/2fa-nextcloud.rst.inc:60
msgid ""
"Nextcloud provides you with backup codes, in case you lost your Nitrokey."
" It is recommended to print out these codes and store them somewhere save"
" otherwise you might not be able to log in to your account anymore!"
msgstr ""

#: ../pro/2fa-odoo.rst.inc:2
msgid "Two-Factor Authentication For ERP Software Odoo"
msgstr ""

#: ../pro/2fa-odoo.rst.inc:8
msgid ""
"`Odoo <https://www.odoo.com/>`__ is a powerful ERP (Enterprise Resource "
"Planning) software for companies of all sizes. Odoo is available as open "
"source and contains modules for CRM, website, e-commerce, accounting, "
"financial accounting, production, warehouse management, project "
"management, document management, among others."
msgstr ""

#: ../pro/2fa-odoo.rst.inc:10
msgid ""
"The secure access to such a central software is especially important and "
"can now be realized with the Nitrokey. For this purpose access is "
"protected by two-factor authentication (2FA) and critical users are given"
" a Nitrokey. From now on during login the Nitrokey will be checked in "
"addition to the user's password. Phishing attacks are thus foiled and "
"your critical company data is protected."
msgstr ""

#: ../pro/2fa-odoo.rst.inc:12
msgid ""
"The two-factor authentication can be carried out using one-time passwords"
" (TOTP, RFC 6238) and FIDO U2F, thus enabling Nitrokey Pro, Nitrokey "
"Storage and Nitrokey FIDO U2F to be used. It is also possible to "
"configure authentication centrally and to activate it only for selected "
"users."
msgstr ""

#: ../pro/2fa-odoo.rst.inc:14
msgid ""
"The FIDO solution was developed together with our partner `initOS "
"<https://www.initos.com/>`__, who are specialized in the development and "
"customization of Odoo. If you are interested, `contact us "
"<https://www.nitrokey.com/contact>`__."
msgstr ""

#: ../pro/2fa-odoo.rst.inc:21
msgid "Video: Two-Factor Authentication With The Nitrokey Pro in Odoo"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:2
msgid "Automatic Screen Lock at Removal"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:6
msgid ""
"This guide will walk you through the configuration of your computer, to "
"automatically lock your session when you remove the Nitrokey."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:8
msgid ""
"The configuration requires the creation of two files under two different "
"directories."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:11
#: ../pro/linux/disk-encryption-luks.rst:24
msgid "Requirements"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:13
msgid ""
"Ubuntu 20.04 or Debian 10 (Buster), both with `Gnome Display Manager "
"<https://wiki.gnome.org/Projects/GDM>`__ installed."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:16
msgid "Nitrokey Pro 2, Nitrokey Storage 2, or Nitrokey HSM 2"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:19
msgid "Configuration"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:22
msgid "Create the ``.rules`` file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:24
msgid "With your favorite text editor create a file called ``85-nitrokey.rules``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:30
msgid "Add the following line to the file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:36
msgid "Save the file and quit the editor."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:38
msgid ""
"This file sets up a new hardware rule that executes the ``gnome-"
"screensaver-lock`` at removal of the Nitrokey device."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:40
msgid ""
"You should change the configuration according to the device you are using"
" as following:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:42
msgid "Nitrokey Pro: ``ENV{PRODUCT}==\"20a0/4108/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:43
msgid "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:44
msgid "Nitrokey Storage: ``ENV{PRODUCT}==\"20a0/4109/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:46
msgid ""
"If you have a different device and need to find out the ``ENV{PRODUCT}`` "
"string you can use the following command to find out the infos when "
"plugging in:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:53
msgid "Create the ``gnome-screensaver-lock`` script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:55
msgid ""
"With your favorite text editor create a file called ``gnome-screensaver-"
"lock``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:61
msgid "Add the following text"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:71
msgid ""
"In the first step, this script looks for the user-name of the gnome "
"session, i.e. ``user``."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:73
msgid ""
"When it is called at Nitrokey removal, the script queries ``user``, "
"switches to its session, and locks the screen by prompting the screen-"
"saver screen."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:76
msgid "Execute the script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:78
msgid ""
"Once all set up, execute the script once, and it will lock the screen. It"
" does not matter if the Nitrokey is plugged or not for this first "
"execution."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:81
#: ../pro/linux/disk-encryption-luks.rst:137
#: ../pro/linux/hard-disk-encryption.rst:114 ../pro/openpgp-outlook.rst.inc:24
#: ../pro/smime-outlook.rst.inc:34 ../pro/smime-thunderbird.rst.inc:43
#: ../pro/smime.rst.inc:32 ../pro/smime.rst.inc:52
#: ../pro/windows/openvpn-viscosity.rst:37 ../shared/openpgp.rst.inc:42
msgid "Usage"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:83
msgid ""
"By now you can log back to your session by entering your password, and "
"(re)plug you Nitrokey if you did not do it before."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:85
msgid ""
"The next time(s) you unplug your Nitrokey from the computer, it will "
"automatically lock the screen."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:2
msgid "Creating a Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:6
msgid ""
"This article shows you how to setup your own private certificate "
"authority backed by a Nitrokey HSM. This certificate authority has no "
"automation and does not really scale. Other open source projects can be "
"referenced for automation and scalability."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:9
msgid "Choose Cryptographic Algorithms"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:11
msgid ""
"I’m going to assume that you’re as paranoid as I am, so I will be using "
"the following command for generating private keys:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:17
msgid ""
"But, if you’re less paranoid that I am, you can safely choose the "
"following options:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:24
msgid ""
"Likewise, I will be using the sha512 algorithm throughout this article, "
"but sha256 can safely be used."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:27
msgid "Preparing to Start"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:29
msgid "To start with, you need to pick a directory to store your CA."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:40
msgid "Install the necessary tools:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:50
msgid ""
"For Windows download the official `OpenSC releases "
"<https://github.com/OpenSC/OpenSC/releases>`__ and make sure you install "
"`p11tool as described <https://github.com/thales-e-security/p11tool>`__. "
"Using the PowerShell most commands should be identical as long as both "
"tools and their binaries are within your ``PATH``."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:56
msgid "Creating The Root Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:58
msgid ""
"We start by generating the private key for the certificate authority "
"directly on the Nitrokey HSM. This allows us to use the private key in "
"the future, but not access it."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:81
msgid ""
"Note the ID number (e0161cc8b6f5d66ac6835ecdecb623fc0506a675), we’ll need"
" it later."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:83
#: ../hsm/certificate-authority.rst.inc:238
msgid ""
"If you need the ID in the future, you can list the keys on the Nitrokey "
"HSM:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:89
#: ../hsm/certificate-authority.rst.inc:244
msgid ""
"We need to create a config file to generate a self-signed public "
"certificate."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:95
#: ../hsm/certificate-authority.rst.inc:250
msgid ""
"Fill out the request information in <angle brackets> with information for"
" your CA."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:155
msgid ""
"Generate the self-signed public certificate from the private key. Use the"
" private key id value from earlier."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:163
msgid ""
"Verify that the root certificate was generated correctly. Verify that "
"Signature-Algorithm matches above and below. Verify that Issuer and "
"Subject match, all root certificates are self signed. Verify that Key "
"Usage matches what was in the v3_ca information in our config file."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:211
msgid "Creating The Intermediate Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:213
msgid ""
"We continue by generating the private key for the intermediate "
"certificate authority directly on the Nitrokey HSM. This allows us to use"
" the private key in the future, but not access it."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:236
msgid ""
"Note the ID number (bcb48fe9b566ae61891aabbfde6a23d4ff3ab639), we’ll need"
" it later."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:277
msgid ""
"Generate the certificate signing request for the intermediate CA from the"
" intermediate CA’s private key. Use the private key ID value from "
"earlier."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:285
msgid ""
"Verify that the CSR was created correctly. Verify that your Subject is "
"correct. Verify that your Public Key and Signature Algorithm are correct."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:318
#: ../hsm/certificate-authority.rst.inc:523
msgid "We need to find out the fully qualified PKCS#11 URI for your private key:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:356
#: ../hsm/certificate-authority.rst.inc:561
msgid "In this instance, the fully qualified PKCS#11 URI is:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:362
msgid ""
"Now, we need to create a config file to use the private key of the root "
"certificate to sign the csr of the intermediate certificate."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:414
msgid "Then sign the intermediate certificate with the root certificate."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:454
msgid ""
"Verify that the root certificate was generated correctly. Verify that the"
" Issuer and Subject are different, and correct. Verify that the Key Usage"
" matches the config file. Verify that the signature algorithm are correct"
" above and below."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:501
msgid ""
"Verify that the intermediate certificate verifies against the root "
"certificate."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:508
msgid "Create a certificate chain file:"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:514
msgid "You now have a certificate authority backed by an HSM."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:517
msgid "Sign a Server Certificate"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:519
msgid ""
"Now that you have a certificate authority, you’d probably like to know "
"how to use it."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:521
msgid ""
"Create a CSR in the normal method for your application. Proper creation "
"of your certificate, including SAN, for your particular application is "
"outside the scope of this document."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:567
msgid ""
"Create a config file to use the private key of the intermediate "
"certificate to sign the CSRs of your servers."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:622
msgid "Then run openssl to sign the server’s CSR."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:671
#: ../pro/windows/openvpn-viscosity.rst:94
msgid "References"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:673
msgid "I used the following resources to help in compiling this document."
msgstr ""

#: ../hsm/certificate-authority.rst.inc:675
msgid ""
"`How to initialize your Nitrokey HSM "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-"
"device>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:676
msgid ""
"`How to create a root and intermediate CA <https://jamielinux.com/docs"
"/openssl-certificate-authority/create-the-root-pair.html>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:677
msgid ""
"`How to ensure the serial numbers of your intermediate CA and server "
"certs are up to spec <https://www.phildev.net/ssl/creating_ca.html>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:678
msgid ""
"`How to generate ECC private keys <https://dev.to/benjaminblack"
"/obtaining-an-elliptic-curve-dsa-certificate-with-lets-encrypt-51bc>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:679
msgid ""
"`How to find the PCKS11 URI from your HSM "
"<https://www.infradead.org/openconnect/pkcs11.html>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:680
msgid ""
"`Troubleshooting (forum) <https://support.nitrokey.com/t/pki-ca-nitrokey-"
"hsm-does-not-support-signing/2598/14>`__"
msgstr ""

#: ../hsm/certificate-authority.rst.inc:683
msgid ""
"This document was originally `written by lyntux "
"<https://gist.github.com/lyntux/f02c6c3414ce48bc8ea8ab6dcdba1623>`__"
msgstr ""

#: ../pro/change-pins.rst.inc:2
msgid "Change User and Admin PIN"
msgstr ""

#: ../pro/change-pins.rst.inc:7
msgid "User PIN"
msgstr ""

#: ../pro/change-pins.rst.inc:9
msgid ""
"The user PIN is at least 6-digits long and is used to get access to the "
"content of the Nitrokey. This is the PIN you will use a lot in every day "
"use e.g. for decrypting messages, for unlocking your encrypted storage "
"(NK Storage only) etc."
msgstr ""

#: ../pro/change-pins.rst.inc:11
msgid ""
"You can change the user PIN with the Nitrokey App if using a Nitrokey Pro"
" or Nitrokey Storage. In the `Nitrokey "
"<https://www.nitrokey.com/download>`__ App open ‘Menu -> Configure -> "
"Change User PIN’ to open the dialog to change the PIN."
msgstr ""

#: ../pro/change-pins.rst.inc:19
msgid "You can change the User PIN in the dialog window now."
msgstr ""

#: ../pro/change-pins.rst.inc:21
msgid ""
"The user PIN can have up to 20 digits and other characters (e.g. "
"alphabetic and special characters). But as the user PIN is blocked as "
"soon three wrong PIN attempts were done, it is sufficiently secure to "
"only have a 6 digits PIN. The default PIN is 123456."
msgstr ""

#: ../pro/change-pins.rst.inc:29
msgid "Admin PIN"
msgstr ""

#: ../pro/change-pins.rst.inc:31
msgid ""
"The admin PIN is at least 8-digits long and is used to change "
"contents/settings of the Nitrokey. That is to say after initializing the "
"Nitrokey you probably won’t need this PIN too often (e.g. if you want to "
"add another password to the password safe of the Nitrokey Pro or Nitrokey"
" Storage)."
msgstr ""

#: ../pro/change-pins.rst.inc:33
msgid ""
"You can change the admin PIN with the Nitrokey App if using a Nitrokey "
"Pro or Nitrokey Storage. In the `Nitrokey App "
"<https://www.nitrokey.com/download>`__ open ‘Menu -> Configure -> Change "
"Admin PIN’ to open the dialog to change the PIN."
msgstr ""

#: ../pro/change-pins.rst.inc:41
msgid "You can change the admin PIN in the dialog window now."
msgstr ""

#: ../pro/change-pins.rst.inc:43
msgid ""
"The admin PIN can have up to 20 digits and other characters (e.g. "
"alphabetic and special characters). But as the admin PIN is blocked as "
"soon three wrong PIN attempts were done, it is sufficiently secure to "
"only have 8 digits PIN. The default PIN is 12345678."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:2
msgid "Full-Disk Encryption With cryptsetup/LUKS"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:6
msgid ""
"This guide shows how to configure LUKS-encrypted volumes, to authenticate"
" at boot with `Nitrokey Pro <https://shop.nitrokey.com/shop/product/nk-"
"pro-2-nitrokey-pro-2-3>`__ or `Nitrokey Storage "
"<https://shop.nitrokey.com/shop/product/nitrokey-storage-2-56>`__."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:8
msgid ""
"To provide some background, cryptsetup-initramfs now has support for "
"using OpenPGP smart cards like the Nitrokey Pro and Nitrokey Storage to "
"unlock LUKS-encrypted volumes. Once you finish the setup, you will just "
"need to insert your Nitrokey at boot and enter your User PIN, instead of "
"typing in your regular disk encryption passphrase."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:14
msgid "These instructions have been tested on Ubuntu 20.04 and Debian 10."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:18
msgid ""
"The following guide can potentially lock you out of your computer. You "
"should be aware of these risks, and we recommend you use the script below"
" on a secondary computer, or after a full backup as you might lose your "
"data."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:26
msgid "An Ubuntu or Debian computer with at least one LUKS-encrypted volume."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:28
msgid ""
"See the section below to determine which method is compatible with this "
"guide."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:30
msgid ""
"A Nitrokey Pro 2 or Nitrokey Storage 2 `initialized <openpgp.html>`_ with"
" keys."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:35
msgid "Known Issues"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:37
msgid ""
"So far, the script works only with manually-partitioned volumes, that are"
" composed of an unencrypted ``/boot`` partition, and an encrypted root "
"``/`` partition."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:41
msgid ""
"Please do not select the automatic full-disk encryption provided by the "
"operating system you are using for this guide. You will face recurrent "
"errors when the partitioning is done automatically, using the "
"installation interface on Ubuntu and Debian."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:47
msgid "Instructions"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:49
msgid "Install dependencies"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:56
msgid "Create smartcard-luks directory"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:63
msgid "Download the smartcard-luks-script"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:71
msgid "Export the public key"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:73
msgid "To export your public key from GnuPG’s keyring:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:80
msgid ""
"If you already have uploaded a public key to a keyserver (or have it "
"stored somewhere else), you should retrieve it in the way you are most "
"comfortable with, and proceed to step 5."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:84
msgid "Determine and verify the correct LUKS device name for your root-partition:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:92
msgid ""
"Usually this should be something like `nvme0n1p3_crypt` (for NitroPC) or "
"`sda3_crypt` (for NitroPads).  You can and should crosscheck that the "
"UUID referred inside `/etc/crypttab` is the designated partition by "
"checking the symbolic link inside `/dev/disks/by-uuid/`."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:97
msgid ""
"Execute the script with the luks device name (e.g., `nvme0n1p3_crypt`) "
"and `pubkey.asc` as arguments."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:104
msgid ""
"Once, you run the script with the OpenPGP public key as argument, it "
"automatically sets up a new LUKS secret, encrypts it against that public "
"key, and sets up crypttab, LUKS, initramfs, and GRUB."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:108
msgid "First you will be prompted for the ``User PIN``"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:113
msgid ""
"Once you unlock the Nitrokey, you will be prompted for your ``OLD "
"passphrase``. It is the passphrase you entered to encrypt your volume at "
"installation."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:119
msgid ""
"This is a fall-back alternative in case you lose your Nitrokey, or if "
"it’s unavailable. So far, it was not tested, and users must be aware of "
"the risk of getting locked out of their computer, if the fall-back method"
" does not work."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:124
msgid ""
"Once you enter the passphrase, the script finishes the setup in about one"
" minute. Do not interrupt the script, or you might get locked out of your"
" computer after reboot."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:131
msgid "Done!"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:133
msgid ""
"By now you must reboot, and you should be able to use your Nitrokey to "
"unlock your encrypted drive."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:139
msgid "After reboot you should be prompted for your User PIN"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:144
msgid "Enter your User PIN to unlock the drive"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:151
msgid "Further Hints"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:154
msgid "Change Passphrase"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:156
msgid ""
"Once this setup is done, you should not use the (gnome) *disks* utility "
"anymore to change the (fallback) passphrase. The proper way to do this is"
" to call *cryptsetup* directly like this:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:164
msgid "With `nvme0n1p3` being the partition you set up the keys for."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:167
msgid "Use Multiple Keys"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:169
msgid ""
"It is easy to use multiple (hardware) security keys so that each of them "
"is able to unlock the LUKS drive independently. Just export multiple "
"public keys and also *pass multiple keys* to the setup script like this:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:179
msgid "Set Cardholder Name"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:181
msgid ""
"During the PIN entry on boot for decryption of the LUKS root partition a "
"cardholder is presented to the user, to set this please use ``$ gpg "
"--edit-card`` and inside the prompt type ``admin`` and ``name`` to set "
"the cardholder for the OpenPGP Card (Nitrokey Storage 2 or Nitrokey Pro "
"2)."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:187
msgid "Replace/Delete Keys"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:189
msgid ""
"It is not possible to add/remove keys directly. Therefore you need to "
"delete/remove the old setup and re-run the setup with the designated "
"key(s):"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:193
msgid ""
"Remove the keyfile (path, if you used the script above) from luks-device "
"(*nvme0n1p3*):"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:199
msgid "Remove the keyfile itself:"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:205
msgid "Re-run setup above."
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:208
msgid "Unlocking LUKS2 with X509 certificate"
msgstr ""

#: ../pro/linux/disk-encryption-luks.rst:210
msgid ""
"SystemD supports unlocking a LUKS2 partition using a X509 certificate, "
"find a great blog entry on how to realize this at the `Personal blog of "
"Vladimir Timofeenko`_"
msgstr ""

#: ../pro/ecc.rst.inc:2
msgid "Elliptic Curves (ECC) Support"
msgstr ""

#: ../pro/ecc.rst.inc:7
msgid "RSA-2048 Becomes Increasingly Insecure"
msgstr ""

#: ../pro/ecc.rst.inc:9
msgid ""
"For security reasons, the German Federal Office for Information Security "
"(Bundesamt für Sicherheit in der Informationstechnik, BSI) no longer "
"recommends RSA keys with a length of 2048 bit `to be used after 2023 "
"<https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/TechGuidelines/TG02102"
"/BSI-TR-02102-1.pdf>`__. This means that longer keys will need to come "
"into use in the foreseeable future. Assuming a usage period of five "
"years, is is already necessary to generate longer keys. However, longer "
"RSA keys with 3072 bit or 4096 bit are significantly slower. For this "
"reason the new Nitrokey Storage 2 and Pro 2 (resp. the integrated OpenPGP"
" Card version 3.3) supports encryption by means of `elliptic-curve "
"cryptography (ECC) <https://en.wikipedia.org/wiki/Elliptic-"
"curve_cryptography>`__. This method is considered to be just as secure "
"with smaller ECC keys as longer RSA keys and is also considerably faster."
msgstr ""

#: ../pro/ecc.rst.inc:14
msgid "Basics of Elliptic-Curve Cryptography"
msgstr ""

#: ../pro/ecc.rst.inc:16
msgid ""
"In contrast to RSA, there are many different forms (so-called curves) of "
"elliptic-curve cryptography. Notably, the `NSA was involved "
"<https://www.schneier.com/essays/archives/2007/11/did_nsa_put_a_secret.html>`__"
" in the development of the NIST curves. Even if there is no evidence of "
"back doors in the curves, using a certain curve can pose a question of "
"trust. Fortunately the new Nitrokey Storage 2 and Pro 2 support two kind "
"of curves, namely NIST and Brainpool. In what follows we will use "
"Brainpool curves. `This article <https://arstechnica.com/information-"
"technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-"
"curve-cryptography/>`__ provides a good entry point for gaining a general"
" understanding of elliptic-curve cryptography."
msgstr ""

#: ../pro/ecc.rst.inc:19
msgid "System Requirements"
msgstr ""

#: ../pro/ecc.rst.inc:21
msgid ""
"In order to create keys based on elliptic curves a Nitrokey Storage 2 / "
"Pro 2 and GnuPG version 2.1.17 or higher are required."
msgstr ""

#: ../pro/ecc.rst.inc:24
msgid "You can read Nitrokey’s OpenPGP Card version via ``gpg2 --card-status``:"
msgstr ""

#: ../pro/ecc.rst.inc:34
msgid ""
"The ‘Version’ field represents the version of the OpenPGP Card integrated"
" in the Nitrokey — in this case it is 3.3 as needed for Elliptic-curve "
"cryptography. OpenPGP Card version 2.2 doesn’t support ECC."
msgstr ""

#: ../pro/ecc.rst.inc:36
msgid ""
"You can learn about the installed version of GnuPG via ``gpg2  "
"--version``. At least version 2.1.16 is required. The newest GnuPG "
"version for Windows can be found `here <https://www.gpg4win.org/>`__ and "
"the newest version for MacOS can be found `here "
"<https://gpgtools.org/>`__. A suitable version of GnuPG is included in "
"the GNU/Linux distributions Ubuntu (since 18.04), Debian (from Stretch "
"onwards), Arch Linux, Fedora (from Release 26 onwards) and openSUSE "
"Tumbleweed. At the end of this articles are instructions how to manually "
"update GnuPG on older Ubuntu versions."
msgstr ""

#: ../pro/ecc.rst.inc:40
msgid ""
"GnuPG 2.0 is still being used, but support for it has been discontinuied "
"in 2017. All communication partners must use GnuPG 2.1 or newer for email"
" encryption by means of ECC, otherwise incompatibility issues might "
"arise. Therefore you should only use ECC if you are sure you will be able"
" to circumvent this problem."
msgstr ""

#: ../pro/ecc.rst.inc:47
msgid "Key Generation on the Nitrokey Storage 2 / Pro 2"
msgstr ""

#: ../pro/ecc.rst.inc:49
msgid ""
"Once these requirements are fulfilled, you can get started. (Warning: "
"existing keys will be overwritten in the process!) You now have two "
"options. The first option is to create the key directly on the Nitrokey "
"Storage 2 / Pro 2. The benefit here is that the key will never be outside"
" the device and as such can never be read out. The second option is to "
"import a previously locally generated key. The advantage in this case is "
"that you can securely store a backup of the key, which can then be "
"restored in case the Nitrokey is lost. Only the first option is described"
" below. In order to create a key with backup, you can access `the "
"following instructions "
"<https://www.gniibe.org/memo/software/gpg/keygen-25519.html>`__ and use "
"this `general information "
"<https://wiki.fsfe.org/TechDocs/CardHowtos/CardWithSubkeysUsingBackups>`__"
" to transfer the key to the Nitrokey."
msgstr ""

#: ../pro/ecc.rst.inc:51
msgid ""
"Within GnuPG there is already a “generate” command, which can be used to "
"easily create keys on the device. However it is not as yet possible to "
"select the type of key directly, so the key must first be prepared. We "
"use the following commands for this:"
msgstr ""

#: ../pro/ecc.rst.inc:59
msgid ""
"Alternatively, other curves could be selected, as described in the next "
"section."
msgstr ""

#: ../pro/ecc.rst.inc:61
msgid ""
"Now we enter ``gpg2 --card-edit`` and see that brainpoolP256r1 is under "
"“key attributes” instead of rsa2048."
msgstr ""

#: ../pro/ecc.rst.inc:87
msgid "Then we create the key."
msgstr ""

#: ../pro/ecc.rst.inc:119
msgid ""
"The Nitrokey now incorporates elliptic-curve cryptography instead of RSA "
"keys and can be used as usual."
msgstr ""

#: ../pro/ecc.rst.inc:122
msgid "Available Curves"
msgstr ""

#: ../pro/ecc.rst.inc:124
msgid ""
"In the above procedure we chose the Brainpool curves. Alternatively, NIST"
" curves can be used. The configuration is carried out as follows:"
msgstr ""

#: ../pro/ecc.rst.inc:133
msgid "Update of GnuPG on Ubuntu"
msgstr ""

#: ../pro/ecc.rst.inc:135
msgid ""
"The following steps are needed only if you are running a Ubuntu version "
"older than 18.04. You can install GnuPG 2.1.18 on such system with the "
"commands below. This involves newer Debian packages, which is the easiest"
" option. This approach has been tested successfully on Ubuntu 17.10 and "
"propbably works on 16.04 as well. However, the occurence of problems "
"during usage can‘t be excluded."
msgstr ""

#: ../pro/ecc.rst.inc:150
msgid ""
"In case you want to undo the installation, you have to execute the "
"following commands:"
msgstr ""

#: ../pro/factory-reset.rst.inc:2
msgid "Factory Reset"
msgstr ""

#: ../pro/factory-reset.rst.inc:6
msgid "There are two types of factory resets for Nitrokey Pro devices:"
msgstr ""

#: ../pro/factory-reset.rst.inc:8
msgid ""
"a factory reset of the OpenPGP smart card, for example using ``gpg "
"--card-edit``, followed by ``admin`` and finally: ``factory-reset``"
msgstr ""

#: ../pro/factory-reset.rst.inc:10
msgid "a factory reset of the entire Nitrokey device using the Nitrokey App."
msgstr ""

#: ../pro/factory-reset.rst.inc:12
msgid ""
"Also, it is possible to generate a new AES key that is used to encrypt "
"the Password Safe without performing a factory reset."
msgstr ""

#: ../pro/factory-reset.rst.inc:17
msgid ""
"The Nitrokey App always generates a new AES key after performing a "
"factory reset."
msgstr ""

#: ../pro/factory-reset.rst.inc:20
msgid ""
"The following table describes the differences between these three "
"operations:"
msgstr ""

#: ../pro/factory-reset.rst.inc:23
msgid "Property"
msgstr ""

#: ../pro/factory-reset.rst.inc:23
msgid "OpenPGP factory reset"
msgstr ""

#: ../pro/factory-reset.rst.inc:23
msgid "Nitrokey factory reset"
msgstr ""

#: ../pro/factory-reset.rst.inc:23
msgid "Generate AES key"
msgstr ""

#: ../pro/factory-reset.rst.inc:25
msgid "Requires admin PIN"
msgstr ""

#: ../pro/factory-reset.rst.inc:25 ../pro/factory-reset.rst.inc:26
#: ../pro/factory-reset.rst.inc:28
msgid "no"
msgstr ""

#: ../pro/factory-reset.rst.inc:25 ../pro/factory-reset.rst.inc:26
#: ../pro/factory-reset.rst.inc:27 ../pro/factory-reset.rst.inc:28
msgid "yes"
msgstr ""

#: ../pro/factory-reset.rst.inc:26
msgid "Destroys OpenPGP keys"
msgstr ""

#: ../pro/factory-reset.rst.inc:27
msgid "Destroys Password Safe"
msgstr ""

#: ../pro/factory-reset.rst.inc:27
msgid "yes [1]_"
msgstr ""

#: ../pro/factory-reset.rst.inc:28
msgid "Destroys One-Time Passwords"
msgstr ""

#: ../pro/factory-reset.rst.inc:31
msgid "Clears the encryption key without overwriting the encrypted data."
msgstr ""

#: ../pro/firmware-update.rst.inc:2
msgid "Firmware Update"
msgstr ""

#: ../pro/firmware-update.rst.inc:4
msgid "This guide describes how to update the firmware on the Nitrokey Pro."
msgstr ""

#: ../pro/firmware-update.rst.inc:7
msgid "This guide is still in an experimental state!"
msgstr ""

#: ../pro/firmware-update.rst.inc:10
msgid ""
"Updating could lead to data loss, so make sure you have proper backup "
"login methods enabled and/or ensure that the Nitrokey Pro is not the only"
" way to authenticate/2FA for your applications/services."
msgstr ""

#: ../pro/firmware-update.rst.inc:15
msgid "How to Update"
msgstr ""

#: ../pro/firmware-update.rst.inc:18
msgid ""
"Never disconnect the Nitrokey Pro or abort the process while updating, "
"this will likely render your device useless!"
msgstr ""

#: ../pro/firmware-update.rst.inc:21
msgid ""
"Make sure you have the latest `pynitrokey` version installed, please "
"check the `installation instructions <../../software/nitropy/all-"
"platforms/installation.html>`__ for your OS."
msgstr ""

#: ../pro/firmware-update.rst.inc:22
msgid ""
"Download the latest stable `firmware image <https://github.com/Nitrokey"
"/nitrokey-pro-firmware/releases>`__."
msgstr ""

#: ../pro/firmware-update.rst.inc:25
msgid ""
"For production use you should choose the latest stable version (so only "
"versions, that don’t contain i.e. “pre-release” or “RC”)."
msgstr ""

#: ../pro/firmware-update.rst.inc:27
msgid "To apply the update run:"
msgstr ""

#: ../pro/firmware-update.rst.inc:36
msgid "Alternative Update Method"
msgstr ""

#: ../pro/firmware-update.rst.inc:38
msgid "Alternatively `dfu-util` can be used for the firmware update:"
msgstr ""

#: ../pro/firmware-update.rst.inc:40
msgid "Install dfu-util"
msgstr ""

#: ../pro/firmware-update.rst.inc:43
msgid "Binaries for Windows are available at:"
msgstr ""

#: ../pro/firmware-update.rst.inc:43
msgid "http://dfu-util.sourceforge.net/releases/"
msgstr ""

#: ../pro/firmware-update.rst.inc:46
msgid "For macOS binaries are available via Homebrew:"
msgstr ""

#: ../pro/firmware-update.rst.inc:46
msgid "https://formulae.brew.sh/formula/dfu-util"
msgstr ""

#: ../pro/firmware-update.rst.inc:48
msgid "*macOS only:* Install `dfu-util` via Homebrew"
msgstr ""

#: ../pro/firmware-update.rst.inc:54
msgid ""
"Use Nitrokey App v1.5-RC7 or higher to change the boot mode of the "
"Nitrokey Pro to update mode."
msgstr ""

#: ../pro/firmware-update.rst.inc:56
msgid "Now the following command to apply the update"
msgstr ""

#: ../pro/firmware-update.rst.inc:62
msgid "The boot mode can now be changed back again with the Nitrokey App."
msgstr ""

#: ../pro/firmware-update.rst.inc:65 ../pro/login-with-pam.rst.inc:44
#: ../pro/openpgp-thunderbird.rst.inc:12 ../pro/ssh.rst:42
msgid "Troubleshooting"
msgstr ""

#: ../pro/firmware-update.rst.inc:79
msgid "**Issue:** ``libnitrokey`` could not be found."
msgstr ""

#: ../pro/firmware-update.rst.inc:68
msgid ""
"In case the libnitrokey could not be found automatically, the path to it "
"can be provided with env. variable:"
msgstr ""

#: ../pro/firmware-update.rst.inc:74
msgid "To find libnitrokey on your system use:"
msgstr ""

#: ../pro/linux/firmware-update.rst:11
msgid "**Issue:** I get ``permission denied for /dev/hidrawX`` during update."
msgstr ""

#: ../pro/linux/firmware-update.rst:4
msgid ""
"This likely means your user has not the needed permissions to read/write "
"the device. Please make sure you have set up the correct `udev-rules`_. "
"Download this `udev-rules`_ set and place it in your udev rules directory"
" (e.g., ``/etc/udev/rules.d``). Then remove your Nitrokey Pro from the "
"USB slot and run: ``udevadm control --reload-rules && udevadm trigger`` "
"or reboot your machine. Afterwards the update should work without the "
"permission issue."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:2
#: ../pro/mac/hard-disk-encryption.rst:2
#: ../pro/windows/hard-disk-encryption.rst:2
msgid "Hard Disk Encryption"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:6
#: ../pro/linux/hard-disk-encryption.rst:7
msgid "VeraCrypt (formerly TrueCrypt)"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:8
#: ../pro/linux/hard-disk-encryption.rst:9
msgid ""
"`VeraCrypt <https://www.veracrypt.fr/en/Home.html>`__ is a free and Open "
"Source disk encryption software for Windows, macOS, and GNU+Linux. It is "
"the successor of TrueCrypt and thus recommended, although the following "
"instructions should apply to TrueCrypt as well."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:11
msgid ""
"Follow these steps to use the program with `Nitrokey Storage 2 "
"<https://shop.nitrokey.com/shop/product/nitrokey-storage-2-56>`__ or "
"`Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product/nk-pro-2"
"-nitrokey-pro-2-3>`__:"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:12
#: ../pro/linux/hard-disk-encryption.rst:15
msgid ""
"Install the latest release of `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__, or download the `PKCS#11 "
"library <https://smartcard-auth.de/download-en.html>`__."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:15
#: ../pro/linux/hard-disk-encryption.rst:18
msgid ""
"Choose the library in VeraCrypt under Settings>Preferences>Security Token"
" (location depends on system, e.g. ``/usr/lib/opensc``)."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:17
#: ../pro/linux/hard-disk-encryption.rst:20
msgid "Generate a 64 Byte key file via Tools>Keyfile Generator."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:18
#: ../pro/linux/hard-disk-encryption.rst:21
msgid ""
"Now you should be able to import the generated key file via Tools>Manage "
"Security Token Keyfiles. You should choose the first Slot (``[0] User "
"PIN``). The keyfile is then stored on the Nitrokey as ‘Private Data "
"Object 1’ (``PrivDO1``)."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:22
#: ../pro/linux/hard-disk-encryption.rst:25
msgid "After this you should wipe the original keyfile on your Computer securely!"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:24
#: ../pro/linux/hard-disk-encryption.rst:27
msgid ""
"Now you can use VeraCrypt with the Nitrokey: Create a container, choose "
"the keyfile on the device as an alternative to a password."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:29
#: ../pro/linux/hard-disk-encryption.rst:32
msgid "Security Consideration"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:31
#: ../pro/linux/hard-disk-encryption.rst:34
msgid ""
"Please note that VeraCrypt doesn’t make use of the full security which "
"Nitrokey (and smart cards in general) offer. Instead it stores a keyfile "
"on the Nitrokey which theoretically could be stolen by a computer virus "
"after the user enters the PIN."
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:36
#: ../pro/linux/hard-disk-encryption.rst:39
msgid ""
"Note: `Aloaha Crypt <https://www.aloaha.com/aloaha-crypt-disk/>`__ is "
"based on TrueCrypt/VeraCrypt but without the described security "
"limitation."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:42
msgid "Hard Disk Encryption on GNU+Linux with LUKS/dm-crypt"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:44
msgid ""
"Here are `excellent instructions <https://blog.kumina.nl/2010/07/two-"
"factor-luks-using-ubuntu/>`__ how to use Nitrokey to encrypt your hard "
"disk under GNU+Linux with LUKS/dm-crypt. `Other instructions "
"<https://wiki.ubuntu.com/SmartCardLUKSDiskEncryption>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:46
msgid ""
"Purism has created a `simple script "
"<https://docs.puri.sm/PureBoot/LibremKeyLUKS.html>`__ to add the "
"Nitrokey/LibremKey as a way to unlock LUKS partitions (not tested by "
"Nitrokey yet)."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:48
msgid ""
"`This project <https://github.com/artosan/nitroluks/>`__ aims to ease the"
" use of LUKS with the Nitrokey Pro or Storage based on the Password Safe "
"(not tested by Nitrokey yet). A description on how to use it on Gentoo "
"can be found `here <https://amedeos.github.io/gentoo/nitrokey/2019/01/21"
"/gentoo-nitrokey-luks.html>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:50
msgid ""
"For Arch Linux, see `initramfs-scencrypt <https://github.com/fuhry"
"/initramfs-scencrypt>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:53
msgid "Storage Encryption on GNU+Linux with EncFS"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:57
msgid "Prerequisite"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:59
msgid ""
"Please ensure that you `installed the device driver, changed the default "
"PINs and generated or imported keys with GnuPG "
"<https://www.nitrokey.com/start>`__."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:63
msgid ""
"`EncFS <https://github.com/vgough/encfs>`__ is an easy to utlity for "
"encrypted file systems and it is based on `FUSE "
"<https://de.wikipedia.org/wiki/Filesystem_in_Userspace>`__. You may "
"follow these steps to use it with very long passwords and Nitrokey Pro 2:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:67
msgid "Initialization"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:69
msgid "Create a key file with random data:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:76
msgid "Encrypt the key file and use the User-ID of your Nitrokey"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:83
msgid "Remove the key file in clear text:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:90
msgid "Create mount point:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:97
msgid "Create the actual encryption folder"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:106
msgid "Unmount the new file system:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:116
msgid "Mount encrypted file system and enter PIN of Nitrokey:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:123
msgid "After usage, unmount the file system:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:131
msgid "Storage Encryption on GNU+Linux with ECryptFS"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:133
msgid ""
"`eCryptfs <https://www.ecryptfs.org/>`__ is a file based transparent "
"encryption file system for GNU+Linux which can be used with Nitrokey "
"through a PKCS#11 driver."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:135
msgid "See `these <http://tkxuyen.com/blog/?p=293>`__ instructions:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:137
msgid "Import the certificate and key to the Nitrokey"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:145
msgid "Create the file ~/.ecryptfsrc.pkcs11:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:152
msgid "Enter this content:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:164
msgid "Copy the serialized id for later usage:"
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:174
msgid ""
"Alternatively, try `ESOSI <https://sourceforge.net/projects/esosi/>`__ or"
" follow these steps using OpenSC and OpenVPN."
msgstr ""

#: ../pro/linux/hard-disk-encryption.rst:176
msgid ""
"Source of the guide: "
"https://www.nitrokey.com/documentation/applications#a:hard-disk-"
"encryption"
msgstr ""

#: ../pro/linux/index.rst:2
msgid "Nitrokey Pro, Linux"
msgstr ""

#: ../pro/linux/index.rst:13
msgid ""
"To access the OpenPGP smart card of the Nitrokey, install the package "
"libccid. On Debian/Ubuntu based Distributions type in terminal: *sudo "
"apt-get update && sudo apt-get install libccid*"
msgstr ""

#: ../pro/linux/index.rst:17
msgid ""
"If your distribution has a rather old version of libccid (<1.4.21) you "
"have to add the device information by yourself (for example if you are "
"using Ubuntu 14.04 or older). In this case please follow these "
"`instructions <https://www.nitrokey.com/documentation/frequently-asked-"
"questions-faq#latest-device-driver-missing-on-older-linux-"
"distribution>`__."
msgstr ""

#: ../pro/linux/index.rst:23 ../pro/mac/index.rst:16
msgid ""
"Download and start the `Nitrokey App "
"<https://www.nitrokey.com/download>`__. Follow the `instructions <change-"
"pins.html>`_ to change the default User PIN (default: 123456) and Admin "
"PIN (default: 12345678) to your own choices."
msgstr ""

#: ../pro/linux/index.rst:-1 ../pro/mac/index.rst:-1
#: ../pro/windows/index.rst:-1
msgid "img"
msgstr ""

#: ../pro/linux/index.rst:33 ../pro/mac/index.rst:26
#: ../pro/windows/index.rst:29
msgid "Your Nitrokey is now ready to use."
msgstr ""

#: ../pro/linux/index.rst:37
msgid ""
"Note: For many use cases described, it is necessary to have either "
"OpenPGP or S/MIME keys installed on the device (see below)."
msgstr ""

#: ../pro/linux/index.rst:41 ../pro/mac/index.rst:40
#: ../pro/windows/index.rst:35
msgid "Key Creation with OpenPGP or S/MIME"
msgstr ""

#: ../pro/linux/index.rst:43 ../pro/mac/index.rst:42
#: ../pro/windows/index.rst:37
msgid ""
"There are two widely used standards for email encryption. While "
"OpenPGP/GnuPG is popular among individuals, S/MIME/x.509 is mostly used "
"by enterprises. If you are in doubt which one to choose, you should use "
"OpenPGP."
msgstr ""

#: ../pro/linux/index.rst:48 ../pro/mac/index.rst:47
#: ../pro/windows/index.rst:42
msgid ""
"To learn more about how to use OpenPGP for email encryption with the "
"Nitrokey, please refer to chapter `OpenPGP Email Encryption "
"<openpgp.html>`_."
msgstr ""

#: ../pro/linux/index.rst:51 ../pro/mac/index.rst:50
#: ../pro/windows/index.rst:45
msgid ""
"To learn more about how to use S/MIME for email encryption with the "
"Nitrokey, please refer to chapter `S/MIME Email Encryption "
"<smime.html>`_."
msgstr ""

#: ../pro/linux/ipsec.rst:2
msgid "IPsec"
msgstr ""

#: ../hsm/ipsec.rst.inc:3
msgid ""
"`Strong Swan <https://www.strongswan.org/>`__ works using the `PKCS#11 "
"driver <https://www.nitrokey.com/documentation/applications#pkcs11>`__. "
"Basically follow these steps:"
msgstr ""

#: ../hsm/ipsec.rst.inc:5
msgid ""
"Generate a key on Nitrokey via pkcs11-tool. In this example it's a 4096 "
"bit RSA key."
msgstr ""

#: ../hsm/ipsec.rst.inc:11
msgid "Generate a certificate signing request via openssl + pkcs11 module"
msgstr ""

#: ../hsm/ipsec.rst.inc:19
msgid "Sign the certificate with your certificate authority"
msgstr ""

#: ../hsm/ipsec.rst.inc:21
msgid "Convert the certificate to DER"
msgstr ""

#: ../hsm/ipsec.rst.inc:27
msgid "Import  the certificate into the Nitrokey via pkcs11-tool"
msgstr ""

#: ../hsm/ipsec.rst.inc:33
msgid ""
"Configure Strongswan to load opensc-pkcs11 module then to load the "
"certificate on Nitrokey. Edit /etc/strongswan.d/charon/pkcs11.conf and "
"add the following module:"
msgstr ""

#: ../hsm/ipsec.rst.inc:44
msgid ""
"Initiate the VPN connection via IPSec/Strongswan, then prompt for "
"Nitrokey PIN"
msgstr ""

#: ../hsm/ipsec.rst.inc:46
msgid "VPN is now connected"
msgstr ""

#: ../pro/linux/login-with-pam.rst:2
msgid "Login With PAM"
msgstr ""

#: ../pro/login-with-pam.rst.inc:4
msgid "How to Setup The Login"
msgstr ""

#: ../pro/login-with-pam.rst.inc:6
msgid ""
"You have two options: `pam_p11 <https://github.com/OpenSC/pam_pkcs11>`__ "
"or `PAM Poldi "
"<https://wiki.ubuntuusers.de/Archiv/Authentifizierung_OpenPGP_SmartCard/>`__."
msgstr ""

#: ../pro/login-with-pam.rst.inc:8
msgid ""
"The solution with pam_p11 is more difficult to achieve and is based on "
"S/MIME certificates. Please have a look at `the documentation "
"<https://opensc.github.io/pam_pkcs11/doc/pam_pkcs11.html>`__ for more "
"information."
msgstr ""

#: ../pro/login-with-pam.rst.inc:10
msgid ""
"PAM Poldi 0.4.1 works flawlessly with Nitrokey for PAM authentication "
"with RSA keys (see Troubleshooting for information on ECC keys). Besides "
"the installation of Poldi (e.g. ``sudo apt-get install libpam-poldi`` on "
"Ubuntu) the following steps are needed to get it working."
msgstr ""

#: ../pro/login-with-pam.rst.inc:12
msgid ""
"It is necessary to already have keys generated on the Nitrokey, as the "
"authentication key is used by PAM."
msgstr ""

#: ../pro/login-with-pam.rst.inc:14
msgid ""
"At first you need to find out the Application ID of your Nitrokey. It "
"looks like or similar to ``D00600012401020000000000xxxxxxxx``."
msgstr ""

#: ../pro/login-with-pam.rst.inc:20
msgid ""
"Now you have to add a line to ``/etc/poldi/localdb/users`` which contains"
" the following information ``<YourApplicationID> <YourUsername>``."
msgstr ""

#: ../pro/login-with-pam.rst.inc:22
msgid ""
"This could look like ``D00600012401020000000000xxxxxxxx nitrokeyuser``. "
"Now dump the public key from the Nitrokey into Poldis local db:"
msgstr ""

#: ../pro/login-with-pam.rst.inc:28
msgid ""
"Please be aware that you have to insert your Application ID in the line "
"above with the one of your Nitrokey!"
msgstr ""

#: ../pro/login-with-pam.rst.inc:30
msgid ""
"Then you have to configure PAM. Just add ``auth sufficient pam_poldi.so``"
" to PAM configuration files according to your needs:"
msgstr ""

#: ../pro/login-with-pam.rst.inc:33
msgid "``/etc/pam.d/common-auth`` for graphical user login"
msgstr ""

#: ../pro/login-with-pam.rst.inc:34
msgid "``/etc/pam.d/login`` for console login"
msgstr ""

#: ../pro/login-with-pam.rst.inc:35
msgid "``/etc/pam.d/sudo`` for sudo authentication"
msgstr ""

#: ../pro/login-with-pam.rst.inc:36
msgid "``/etc/pam.d/gnome-screensaver`` for login back from a locked screen"
msgstr ""

#: ../pro/login-with-pam.rst.inc:37
msgid "and other files in ``/etc/pam.d``"
msgstr ""

#: ../pro/login-with-pam.rst.inc:39
msgid ""
"PAM is dangerous to play around with, so make sure you have a way of "
"accessing the machine if you break authentication completely. Remember "
"that booting into rescue mode from GRUB requires a root password, so keep"
" that or a live CD which can read your filesystems to hand."
msgstr ""

#: ../pro/login-with-pam.rst.inc:41
msgid ""
"Here you find `further instructions "
"<https://wiki.ubuntuusers.de/Archiv/Authentifizierung_OpenPGP_SmartCard>`__"
" (in German, partially outdated)."
msgstr ""

#: ../pro/login-with-pam.rst.inc:46
msgid ""
"If you get an error similar to ``ERR 100663414 Invalid ID <SCD>`` you "
"should try instead"
msgstr ""

#: ../pro/login-with-pam.rst.inc:52
msgid ""
"Please be aware that you have to insert your Application ID in the line "
"above with the one of your stick!"
msgstr ""

#: ../pro/login-with-pam.rst.inc:55
msgid "ECC Keys"
msgstr ""

#: ../pro/login-with-pam.rst.inc:56
msgid ""
"Unfortunately, Poldi has no support for ECC keys yet. But there is a "
"`patch for ECC keys used with Nitrokey Start "
"<https://dev.gnupg.org/T4009>`__. This is already included in the master "
"branch of the Poldi development repository and thus will be released in a"
" newer version eventually. In the meantime the only option is to build "
"Poldi from source."
msgstr ""

#: ../pro/openpgp.rst.inc:2
msgid "OpenPGP Email Encryption"
msgstr ""

#: ../pro/smime.rst.inc:9 ../shared/openpgp.rst.inc:1
msgid "There are two widely used standards for email encryption."
msgstr ""

#: ../pro/smime.rst.inc:11 ../shared/openpgp.rst.inc:3
msgid "OpenPGP/GnuPG is popular among individuals,"
msgstr ""

#: ../pro/smime.rst.inc:13 ../shared/openpgp.rst.inc:5
msgid "S/MIME/X.509 is mostly used by enterprises."
msgstr ""

#: ../shared/openpgp.rst.inc:7
msgid ""
"If you are in doubt which one to choose, you should use OpenPGP. While "
"this page describes the usage of OpenPGP, S/MIME is described `here "
"<smime.html>`_."
msgstr ""

#: ../shared/openpgp.rst.inc:9
msgid ""
"Please familiarize yourself with the general concept behind the OpenPGP "
"standard first, for example by reading `this info graphic "
"<https://emailselfdefense.fsf.org/en/infographic.html>`__ of the Free "
"Software Foundation."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:9 ../pro/openpgp-keygen-gpa.rst.inc:11
#: ../pro/openpgp-keygen-on-device.rst.inc:17 ../shared/openpgp.rst.inc:12
msgid "Key Generation"
msgstr ""

#: ../shared/openpgp.rst.inc:14
msgid "If you do not have OpenPGP keys yet, you need to generate them first."
msgstr ""

#: ../shared/openpgp.rst.inc:16
msgid ""
"`Generate keys on your Nitrokey device <openpgp-keygen-gpa.html>`_ - this"
" is the best option if you are unexperienced, but you won’t have a backup"
" of your keys and therefore won’t be able to mitigate the loss of the "
"Nitrokey"
msgstr ""

#: ../shared/openpgp.rst.inc:22
msgid ""
"`Generate keys on your Nitrokey device with different algorithm or key "
"size <openpgp-keygen-on-device.html>`_ - this is as secure as the "
"previous option and thus you won’t have a backup as well, but you can "
"change the key attributes (that is the algorithm and key size)"
msgstr ""

#: ../shared/openpgp.rst.inc:28
msgid ""
"`Generate keys locally <openpgp-keygen-backup.html>`_ and copy them to "
"your Nitrokey device - this is the most flexible, expert option, but only"
" secure if your system is not compromised, because you can create a "
"backup key outside your Nitrokey A similar description in french can be "
"found `here <https://xieme-art.org/post/importer-des-clefs-gnupg-dans-sa-"
"nitrokey-pro/>`__."
msgstr ""

#: ../shared/openpgp.rst.inc:37
msgid "Importing Existing Keys"
msgstr ""

#: ../shared/openpgp.rst.inc:39
msgid ""
"If you already have OpenPGP keys you may want to use them with your "
"Nitrokey, instead of generating new ones. Importing existing keys works "
"basically the same as generating keys locally first and copying them to "
"the Nitrokey (see above). Therefore, please have a look at the "
"`corresponding instructions <openpgp-keygen-backup.html#key-import>`_. "
"Note that you probably want to generate another subkey for authentication"
" to your existing key. See at the same instructions for `subkey "
"generation <openpgp-keygen-backup.html#subkey-for-authentication>`_."
msgstr ""

#: ../pro/smime.rst.inc:34 ../pro/smime.rst.inc:54 ../shared/openpgp.rst.inc:44
msgid "You can find further information about the usage on these pages:"
msgstr ""

#: ../shared/openpgp.rst.inc:46
msgid "to use `OpenPGP encryption with Thunderbird <openpgp-thunderbird.html>`_"
msgstr ""

#: ../shared/openpgp.rst.inc:49
msgid "to use `OpenPGP encryption with Outlook <openpgp-outlook.html>`_"
msgstr ""

#: ../shared/openpgp.rst.inc:52
msgid ""
"to use `Claws Mail <https://www.claws-mail.org/plugin.php?plugin=gpg>`__,"
" an email client (and news reader) for Linux and Windows"
msgstr ""

#: ../shared/openpgp.rst.inc:56
msgid ""
"to use `Evolution <https://help.gnome.org/users/evolution/stable/mail-"
"encryption.html.en>`__, an email client for the Gnome Desktop on Linux "
"systems"
msgstr ""

#: ../shared/openpgp.rst.inc:60
msgid "to use `GPGTools <https://gpgtools.org/>`__ on macOS."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:2
msgid "OpenPGP Key Generation With Backup"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:6
msgid ""
"The following instructions explain the generation of OpenPGP keys and how"
" to copy them to the Nitrokey. This method has the advantage of providing"
" a backup of the keys in case of losing or breaking the Nitrokey. The "
"instructions are based on the command line interface of GnuPG. Thus, you "
"need to have GnuPG installed on your system. The newest GnuPG version for"
" Windows can be found `here <https://www.gpg4win.org/>`__ and the newest "
"version for MacOS can be found `here <https://gpgtools.org/>`__. Users of"
" Linux systems please install GnuPG with help of the package manager."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:11
msgid ""
"At first, you need to generate a key locally. You can decide, which key "
"attributes to use and - most importantly - you can export the key and "
"keep it somewhere save in case you need to restore the key."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:14
msgid "Main Key and Encryption Subkey"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:16
msgid ""
"We can use the command ``gpg --full-generate-key --expert`` to start a "
"guided key generation with all possible options. You can choose the key "
"type (usually RSA (1) or ECC (9)), the length of the key and other "
"attributes. The following output is just a simple example, you may choose"
" other values."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:80
msgid ""
"For information regarding the supported algorithms, please refer to the "
"`faq <../faq.html>`_"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:84
msgid "Subkey for Authentication"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:86
msgid ""
"You now have a main key with the capability to sign and certify (marked "
"as [SC]) and a subkey for encryption (marked as [E]). It is necessary to "
"have another subkey for use cases in which authentication is needed. This"
" subkey is generated in the next step. Type in ``gpg --edit-key --expert "
"keyID`` to start the process, whereas “keyID” is either the id of the key"
" or the email address used during key generation."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:107
msgid ""
"Now you are in the interactive mode of GnuPG and you can add a key by "
"simply typing ``addkey``. You need to choose the key you want to use. It "
"is crucial to choose “set your own capabilities”, because we want to have"
" the “authenticate” capability which is not available otherwise. We "
"toggle sign and encrypt by typing ``s`` and ``e`` and we activate "
"authenticate by typing ``a``."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:165
msgid ""
"We quit with ``q``. Afterwards we need to answer the same questions as "
"before. Finally, we have a ready-to-go key set which we can import to our"
" device."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:199
msgid ""
"Now is good time to backup your key. Please keep this backup very secure."
" It is best practice to never have this key on a regular computer which "
"has connection to the internet, so that the key never gets compromised. "
"You can create a backup with something like:"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:206
msgid "Key Import"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:208
msgid ""
"You have a main key and two subkeys which can be imported to your "
"Nitrokey. Before proceeding please make sure that you really have a "
"backup of the key, if you need one. The ``keytocard`` command used in the"
" next steps will **delete** your key from your disk!"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:210
msgid ""
"We start the process by accessing the interactive interface of GnuPG "
"again with ``gpg --edit-key --expert keyID``, whereas ``keyID`` is either"
" the id of the key or the email address used during key generation."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:246
msgid ""
"We just imported the main key to the card. Now we proceed with the two "
"subkeys. We type ``key 1`` to select the encryption subkey and type in "
"``keytocard`` again and select the slot to use."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:275
msgid ""
"Now we deselect the first key with ``key 1`` and select the second subkey"
" with ``key 2`` and move it as well with ``keytocard``. Afterwards we "
"quit and save the changes."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:318
msgid ""
"Your keys are now moved to the Nitrokey and thus secured in hardware. "
"Congratulations!"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:321
#: ../pro/openpgp-keygen-gpa.rst.inc:51
#: ../pro/openpgp-keygen-on-device.rst.inc:204
msgid "Exporting Public Key and Keyserver Usage"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:323
#: ../pro/openpgp-keygen-gpa.rst.inc:53
#: ../pro/openpgp-keygen-on-device.rst.inc:206
msgid ""
"Although you can start to use your Nitrokey right away after generating "
"the keys on your system, you need to import your public key on every "
"system, you want to use the Nitrokey on. So to be prepared you have two "
"options: You either save the public key anywhere you like and use it on "
"another system or you save the public key on a webpage/keyserver."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:326
#: ../pro/openpgp-keygen-on-device.rst.inc:209
msgid "Generating a Public Key File"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:328
msgid ""
"To get a simple file of your public key, you can just use ``gpg --armor "
"--export keyID > pubkey.asc``. Use either the fingerprint as “keyID” "
"(look at ``gpg -K`` to get it) or just use your email address as an "
"identifier."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:330
msgid ""
"You can carry this file with you or send it to anyone who you like. This "
"file is not secret at all. If you want to use the Nitrokey on another "
"system, you first import this public key via ``gpg --import pubkey.asc`` "
"and then types ``gpg --card-status`` so that the system knows where to "
"look for this key. That’s all."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:334
#: ../pro/openpgp-keygen-on-device.rst.inc:216
msgid "Uploading the Public Key"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:336
#: ../pro/openpgp-keygen-on-device.rst.inc:218
msgid ""
"If you do not want to carry a public keyfile with you, you can upload it "
"to keyserver. You can do this by typing ``gpg --keyserver "
"search.keyserver.net --send-key keyID``. If you are using another machine"
" you can just import it by using ``gpg --keyserver search.keyserver.net "
"--recv-key keyID``."
msgstr ""

#: ../pro/openpgp-keygen-backup.rst.inc:338
msgid ""
"Another possibility is to change the URL setting on your card. Start "
"``gpg --card-edit`` again and first set the URL where the key is situated"
" (e.g. on the keyserver or on your webpage etc.) via the ``url`` command."
" From now on you can import the key on another system by just using the "
"``fetch`` command within the ``gpg --card-edit environment``."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:2
msgid "OpenPGP Key Generation Using GPA"
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:6
msgid ""
"The following instructions explain the generation of OpenPGP keys "
"directly on the Nitrokey with help of the GNU Privacy Assistant (GPA). "
"You won’t be able to create a backup of these keys. Thus, if you lose the"
" Nitrokey or it breaks you can not decrypt mails or use these keys "
"anymore. Please see `here <openpgp-outlook.html>`_ for a comparison of "
"the different methods to generate OpenPGP keys."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:8
msgid ""
"You need to have GnuPG and GPA installed on your system. The newest "
"version for Windows can be found `here <https://www.gpg4win.org/>`__ "
"(make sure to check “GPA” during the installation!). Users of Linux "
"systems please install GnuPG and GPA with help of the package manager "
"(e.g. using ``sudo apt install gnupg gpa`` on Ubuntu)."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:13
msgid ""
"At first, open the GNU Privacy Assistant (GPA). You may are asked to "
"generate a key, you can skip this step for now by clicking “Do it later”."
" In the main window, please click on “Card” or “Card Manager”."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:20
msgid ""
"Another windows opens. Please go to “Card” -> “Generate key” to start the"
" key generation process."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:27
msgid ""
"Now you can put in your name and the email address you want to use for "
"the key that will be generated next. You may choose an expiration date "
"for your key, but you don’t have to."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:29
msgid ""
"**Please do not use the backup checkbox**. This “backup” does only save "
"the encryption key. In case of a loss of the device, you will not be able"
" to restore the whole key set. So on the one hand it is no full backup "
"(use `these instructions <openpgp-keygen-backup.html>`_ instead, if you "
"need one) and on the other hand you risk that someone else can get in "
"possession of your encryption key. The advantage of generating keys on-"
"device is to make sure that keys are stored securely. Therefore, we "
"recommend to skip this half-backup."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:36
msgid ""
"You will be asked for the admin PIN (default: 12345678) and the user PIN "
"(default: 123456). When the key generation is finished, you can see the "
"fingerprints of the keys on the bottom of the window. You may fill up the"
" fields shown above, which are saved on your Nitrokey as well."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:43
msgid ""
"Now you can close the window and go back to the main window. Your key "
"will be visible in the key manager after refreshing. Every application "
"which makes use of GnuPG will work with your Nitrokey as well, because "
"GnuPG is fully aware of the fact, that the keys are stored on your "
"Nitrokey."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:60
msgid ""
"Right-click on your key entry in the key manager and click “Export Keys…”"
" to export the public key to a file and/or “Send Keys…” to upload the key"
" to a keyserver."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:62
msgid ""
"You can carry the keyfile with you or send it to anyone who you like. "
"This file is not secret at all. If you want to use the Nitrokey on "
"another system, you first import this public key via clicking on “Keys” "
"-> “Importing Keys…” and choosing the file."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:65
msgid ""
"If you do not want to carry a public keyfile with you, you can upload it "
"to keyserver. If you are using another machine you can just import it by "
"using “Server” -> “Retrieve Keys…” and entering your name or key id."
msgstr ""

#: ../pro/openpgp-keygen-gpa.rst.inc:67
msgid ""
"Another possibility is to change the URL setting on your card. Open the "
"card manager again and fill in the URL where the key is situated (e.g. on"
" the keyserver or on your webpage etc.). From now on you can import the "
"key on another system by right-clicking on the URL and click on “Fetch "
"Key”."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:2
msgid "OpenPGP Key Generation On-Device"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:6
msgid ""
"The following instructions explain the generation of OpenPGP keys "
"directly on the Nitrokey. This is done by using the command line "
"interface of GnuPG. Thus, you need to have GnuPG installed on your "
"system. The newest GnuPG version for Windows can be found `here "
"<https://www.gpg4win.org/>`__ and the newest version for MacOS can be "
"found `here <https://gpgtools.org/>`__. Users of Linux systems please "
"install GnuPG with help of the package manager."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:10
msgid ""
"These instructions are based on GnuPG version 2.2.6 or higher. Some Linux"
" Distributions have an older version installed. In this case please "
"choose a different method as listed `here <openpgp.html>`_ or install a "
"newer version if possible."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:19
msgid ""
"The following descriptions explain the basic key generation on-device via"
" GnuPG’s command line interface. The default behaviour is to generate RSA"
" keys of 2048 bit size. If you want to change the key algorithm and "
"length, have a look at the next section first."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:21
msgid "Open a command line and type ``gpg2 --card-edit``."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:23 ../pro/smime.rst.inc:4
#: ../pro/smime.rst.inc:24
msgid ""
"To open the Windows command line please push the Windows-key and R-key. "
"Now type ‘cmd.exe’ in the text field and hit enter. To open a Terminal on"
" macOS or GNU/Linux please use the application search (e.g. spotlight on "
"macOS)."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:51
msgid ""
"Now you are in the interactive interface of GnuPG. Activate the admin "
"commands with ``admin`` and use ``generate`` afterwards to start the "
"generation of keys."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:93
msgid ""
"**Please do not create the suggested off-card backup.** This “backup” "
"does only save the encryption key, but not the signature and "
"authentication keys. In case of a loss of the device, you will not be "
"able to restore the whole key set. So on the one hand it is no full "
"backup (use `these instructions <openpgp-keygen-backup.html>`_ instead, "
"if you need one) and on the other hand you risk that someone else can get"
" in possession of your encryption key. The advantage of generating keys "
"on-device is to make sure that keys are stored securely. Therefore, we "
"recommend to skip this half-backup."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:96
msgid ""
"Now you have a complete key set on your device which can be used for the "
"`various applications "
"<https://www.nitrokey.com/documentation/applications>`__ listed on our "
"site. Type ``quit`` and hit enter to exit."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:99
msgid "Change Key Attributes"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:101
msgid ""
"This section is about changing the key attributes. If you want to use the"
" default values, you can proceed with the next section."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:103
msgid "Open a command line and type ``gpg2 --card-edit --expert``."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:129
msgid ""
"Now you are in the interactive interface of GnuPG. As you can see in the "
"“Key attributes” field above, the default value rsa2048 is set. To change"
" them, activate the admin commands with ``admin`` and use ``key-attr`` "
"afterwards to change the attributes of the keys."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:160
msgid ""
"You can choose the attribute for each key (that is, signature, encryption"
" and authentication key). Most people will use the same attributes for "
"every key. Type ``list`` to see the results (have look at the “Key "
"attributes” field, which now reads rsa4096)."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:186
msgid ""
"Type ``quit`` and hit enter to exit or proceed directly with the previous"
" section to actually generate the keys with the key attributes you just "
"set."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:188
msgid ""
"The following table illustrates which algorithm can be used on which "
"device."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:191
msgid "\\"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:197
msgid "curve25519 (ECC)"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:198
msgid "NIST (ECC)"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:199
msgid "Brainpool (ECC)"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:200
msgid "secp256k1"
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:211
msgid ""
"To get a simple file of your public key, you can just use ``gpg2 --armor "
"--export keyID > pubkey.asc``. Use either the fingerprint as “keyID” "
"(look at ``gpg -K`` to get it) or just use your email address as an "
"identifier."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:213
msgid ""
"You can carry this file with you or send it to anyone who you like. This "
"file is not secret at all. If you want to use the Nitrokey on another "
"system, you first import this public key via ``gpg2 --import pubkey.asc``"
" and then types ``gpg2 --card-status`` so that the system knows where to "
"look for this key. That’s all."
msgstr ""

#: ../pro/openpgp-keygen-on-device.rst.inc:220
msgid ""
"Another possibility is to change the URL setting on your card. Start gpg "
"–card-edit again and first set the URL where the key is situated (e.g. on"
" the keyserver or on your webpage etc.) via the ``url`` command. From now"
" on you can import the key on another system by just using the ``fetch`` "
"command within the ``gpg --card-edit`` environment."
msgstr ""

#: ../pro/openpgp-outlook.rst.inc:2
msgid "OpenPGP Email Encryption with Outlook"
msgstr ""

#: ../pro/openpgp-outlook.rst.inc:8
msgid ""
"Unfortunately, there is no solution to use OpenPGP in Outlook for macOS "
"yet."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:22 ../pro/openpgp-outlook.rst.inc:12
#: ../pro/smime-outlook.rst.inc:7 ../pro/smime-thunderbird.rst.inc:7
#: ../pro/smime.rst.inc:7 ../pro/windows/openpgp-csp.rst:9
#: ../pro/windows/openvpn-easyrsa.rst:22
#: ../pro/windows/openvpn-viscosity.rst:15
msgid "Prerequisites"
msgstr ""

#: ../pro/openpgp-outlook.rst.inc:14
msgid ""
"If you do not have PGP-Keys on your Nitrokey yet, please look at `this "
"page <openpgp.html>`_ first."
msgstr ""

#: ../pro/openpgp-outlook.rst.inc:16
msgid ""
"You need to have GnuPG installed on your System. The newest GnuPG version"
" for Windows can be found `here <https://www.gpg4win.org>`__. You need to"
" make sure to have “GpgOL” checked during installation process (see "
"below)."
msgstr ""

#: ../pro/openpgp-outlook.rst.inc:26
msgid ""
"After installing GPG4Win along with GpgOL, you will see a new icon "
"labeled “Secure” in the composing window. To encrypt and sign a mail you "
"just click on the sign like seen below."
msgstr ""

#: ../pro/openpgp-outlook.rst.inc:33
msgid ""
"GnuPG will start signing and encrypting the mail as soon as you click on "
"‘send’. You are requested to choose the identity you want to sign with "
"and encrypt for."
msgstr ""

#: ../pro/openpgp-outlook.rst.inc:40
msgid ""
"Furthermore, you are asked for typing in the User PIN of the Nitrokey for"
" signing the mail."
msgstr ""

#: ../pro/openpgp-outlook.rst.inc:47
msgid ""
"You will be asked automatically for your User PIN if you want to read an "
"encrypted mail."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:2
msgid "OpenPGP Email Encryption With Thunderbird"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:7
msgid "Thunderbird 78.3 and newer"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:9
msgid ""
"At the moment Thunderbird’s 78 support for the OpenPGP emails is not easy"
" to set up. See `Thunderbird’s documentation "
"<https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards>`__ for details."
" Here is a `comprehensive German guide "
"<https://decatec.de/it/thunderbird-78-pgp-verschluesselung-mit-dem-"
"nitrokey-storage/>`__."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:14
msgid ""
"Error message: ``The configured key ID '4BA0183FCBA844A7' cannot be found"
" on your keyring``"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:16
msgid "Make sure that the public key is imported to the Thunderbird’s manager and"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:17
msgid ""
"The key ID does not contain any whitespace, and consists of 16 characters"
" from range 0-9 A-F"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:18
msgid "you have GPA or Kleopatra software installed."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:20
msgid ""
"Please use Kleopatra or `GPA <openpgp-keygen-gpa.html>`_ software to "
"handle the smart card."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:23
msgid "Thunderbird 77 and older"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:26
msgid "Installation"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:28
msgid ""
"Install the device driver as described `here "
"<https://www.nitrokey.com/documentation/installation>`__."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:31
msgid ""
"Install `Thunderbird <https://www.thunderbird.net/en-US/>`__ and the Add-"
"on `Enigmail <https://www.enigmail.net/index.php/en/>`__."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:35
msgid "Changing PINs"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:37
msgid "There are two PINs for the Nitrokey:"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:39
msgid "The User PIN required for daily work"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:41
msgid ""
"The Admin PIN is required to change keys or other settings of the device."
" In addition, the Nitrokey can be unlocked (for example, after 3 times "
"incorrect input of the User PIN) by means of the Admin PIN."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:45
msgid ""
"After receiving the Nitrokey, you should immediately change the User PIN "
"= “123456” and Admin PIN = “12345678”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:49
msgid "Procedure"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:51
msgid "Insert the Nitrokey into a USB port on your computer."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:53
msgid "Start Thunderbird."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:55
msgid ""
"In Thunderbird, select as shown in the following picture. “OpenPGP” → "
"“Manage smart card”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:63
msgid "In the “SmartCard Details” window, select “SmartCard → Change PIN”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:70
msgid ""
"Select “Change PIN”. This is your User PIN you need for daily work. Enter"
" the current PIN ( “123456” for delivery) and twice your new PIN. For "
"this PIN you can use the characters: a-z A-Z 0-9 / .;;:- !? () [] {}% +. "
"The PIN should be at least 6 characters long. Click “OK”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:81
msgid "Repeat the procedure for the Admin PIN. “SmartCard → Change PIN”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:88
msgid ""
"Select Change Admin PIN. This is your Admin PIN that you only rarely "
"need. Enter the current PIN ( “12345678” for delivery) and the new PIN "
"twice. For this PIN, you can use the characters: a-z A-Z 0-9 / .;;:- !? "
"() [] {}% +. The PIN should be at least 8 characters long. Click “OK”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:99
msgid ""
"You have now changed the PINs and should continue to generate your "
"personal keys."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:102
msgid "Generation of Keys"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:104
msgid ""
"To encrypt data and e-mails, a key pair consisting of a public key and a "
"private key, must first be generated. The so-called public key is used to"
" **en**\\ crypt the data or e-mails. You can distribute this to all those"
" with whom you want to communicate securely (for example, publish it "
"publicly on your site). The so-called private key is used to **de**\\ "
"crypt the data or messages. This key should **NEVER** be made known! "
"Usually, you also do not have direct access to it (see below), since this"
" is stored securely on the Nitrokey. Use the Nitrokey to create both keys"
" using the following procedure:"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:107
msgid "Insert the Nitrokey into a USB port on your computer. StartThunderbird"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:110
msgid ""
"In Thunderbird, select as shown in the following picture „OpenPGP“ → "
"„Manage Smart Card“"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:113
msgid "In the “SmartCard details” window, select “SmartCard” → “Generate key”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:116
msgid ""
"In the following window, select your e-mail address for which you want to"
" generate keys. Verify that the e-mail address specified in “User ID” is "
"correct. You can also specify whether a private key backup copy should be"
" stored on your computer."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:126
msgid ""
"If you do not create a backup copy, you have no chance to get your "
"encrypted data if the Nitrokey is lost or damaged!"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:134
msgid ""
"It is recommended to store this safety device. Select “Save key copy of "
"the key outside the Smard Card”. Then enter your personal password for "
"the backup copy under “Passphrase”. This password should not be less than"
" 8 characters, and should contain both uppercase and lowercase letters "
"and numbers. You can also use a long sentence, but avoid known prose or "
"lyric. Also, no name or known term should be used."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:142
msgid ""
"**Allowed characters**: a-z A-Z 0-9 /.,;:-!?( )%+ (no umlauts ä,ü,ö,Ä,Ü,Ö"
" or ß)"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:144
msgid ""
"**Poor Passwords**: qwerty123, ILoveSusi3, Password, If you can dream it,"
" you can do it."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:146
#, python-format
msgid ""
"**Strong Passwords**: g(Ak?2Pn7Yn or Ki.stg2bLqzp%d or A dog with greeen "
"Earz and fife legs (spelling errors increase security)"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:148
msgid ""
"You do **not** need this password for daily work. It is only necessary "
"for the restoration of the secret key, e.g. if you have lost the "
"Nitrokey. Therefore, keep the password in a safe place."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:150
msgid ""
"You can also specify whether and when the key should be automatically "
"invalid. This means, from this point onwards, no more e-mails can be "
"encrypted with this key and you have to create a new key pair."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:152
msgid "Finally, click on “Generate key pair”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:159
msgid "You are now asked if the key should be generated. Confirm with “Yes”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:166
msgid ""
"In order for the program to write your keys to the stick, you must enter "
"the admin PIN and the user PIN (changed above)."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/windows/2fa-microsoft.rst:-1
#: ../pro/windows/openpgp-csp.rst:-1
msgid "img10"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:174
msgid ""
"The key generation can take a few minutes. Do not terminate the program "
"prematurely!"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:176
msgid ""
"When the key generation is complete, you receive the following message. A"
" certificate is now created that allows you to invalidate your key in an "
"emergency. This certificate is automatically saved with your private key."
" This should be printed out or backed up on at least one other external "
"medium so that you can revoke the validity of the keys if your keys and "
"backups are lost. Click “Yes”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:183
msgid ""
"You can now select the directory in which the backup copy is stored. This"
" copy is encrypted with your password entered above. This means that no "
"one can read or use the keys without your password. Do not give your "
"password to anyone. This file with the name of your e-mail address and "
"the suffix “.asc” should be backed up on another medium. After selecting "
"the directory, click “Save”."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/windows/2fa-microsoft.rst:-1
#: ../pro/windows/openpgp-csp.rst:-1
msgid "img11"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:190
msgid "Here you must again specify your user PIN or passphrase. Then click “OK”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/windows/2fa-microsoft.rst:-1
msgid "img12"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:198
msgid ""
"You will now see the message that the certificate was created and saved. "
"Click “OK”"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/windows/2fa-microsoft.rst:-1
msgid "img13"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:206
msgid ""
"Key generation is now complete. You can now exit the program (File - "
"Close)."
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:-1 ../pro/windows/2fa-microsoft.rst:-1
msgid "img14"
msgstr ""

#: ../pro/openpgp-thunderbird.rst.inc:214
msgid ""
"Your Nitrokey is personalized and ready to use. **Have fun with the "
"secure email encryption!**"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:2 ../pro/windows/openvpn-easyrsa.rst:2
msgid "OpenVPN Configuration with Easy-RSA"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:9 ../pro/windows/openvpn-easyrsa.rst:9
msgid ""
"This guide is work-in-progress, and will be updated accordinlgy. Please "
"take this status into consideration."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:11 ../pro/windows/openvpn-easyrsa.rst:11
msgid ""
"This guide shows how to configure OpenVPN clients to login using a "
"`Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product/nk-pro-2"
"-nitrokey-pro-2-3>`__ or a `Nitrokey Storage 2 "
"<https://shop.nitrokey.com/de_DE/shop/product/nitrokey-storage-2-56>`__. "
"For software key management we will be using `Easy-RSA "
"<https://github.com/OpenVPN/easy-rsa>`__, a utility that has been "
"evolving alongside OpenVPN."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:15
msgid ""
"To sign the certificates, we will use a `Nitrokey HSM 2 "
"<https://shop.nitrokey.com/shop/product/nk-pro-2-nitrokey-pro-2-3>`__ set"
" up as `Certificate Authority <certificate-authority.html#creating-the-"
"intermediate-certificate-authority>`_, however this guide does not cover "
"the set up of the CA itself (it is clear and `well documented here "
"<certificate-authority.html#sign-a-server-certificate>`_)."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:18 ../pro/windows/openvpn-easyrsa.rst:18
msgid ""
"We will use Easy-RSA, because it seems to provide some flexibility, and "
"allows key management via external PKIs. We will use it on the server to "
"issue the signing request, and repeat the same process on the client. The"
" Certificate Signing Requests will be signed by the CA on the Nitorkey "
"HSM, and re-transmitted to the server and the client."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:24 ../pro/windows/openvpn-easyrsa.rst:24
msgid ""
"In the following documentation we will require 3 different machines as "
"following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:26 ../pro/windows/openvpn-easyrsa.rst:26
msgid "OpenVPN server (v. 2.5) on Debian 10 (EC2 virtual machine - AWS)"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:28 ../pro/windows/openvpn-easyrsa.rst:28
msgid "OpenVPN client (v. 2.4.9) on Fedora 30 (local machine)"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:30 ../pro/windows/openvpn-easyrsa.rst:30
msgid ""
"The Certificate Authority will be accessible from a standalone machine "
"with Fedora 30 (local machine)"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:33 ../pro/windows/openvpn-easyrsa.rst:33
msgid ""
"To interact with the devices we will require `OpenSC 0.20 "
"<https://github.com/OpenSC/OpenSC/wiki>`__ installed on the client and CA"
" machine (the local machines). You can follow the instructions to set it "
"up in `this link (*Unix) <https://github.com/OpenSC/OpenSC/wiki"
"/Compiling-and-Installing-on-Unix-flavors>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:36 ../pro/windows/openvpn-easyrsa.rst:36
msgid "To download the dependencies on Fedora machines we can this instruction:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:42 ../pro/windows/openvpn-easyrsa.rst:42
msgid ""
"For Debian Linux, more recent OpenSC packages are available `here "
"<https://github.com/Nitrokey/opensc-build>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:44 ../pro/windows/openvpn-easyrsa.rst:44
msgid "We will use the following Nitrokeys for physical key management:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:46 ../pro/windows/openvpn-easyrsa.rst:46
msgid ""
"An authentication key using the `Nitrokey Pro 2 (pdf) "
"<https://www.nitrokey.com/files/doc/Nitrokey_Pro_factsheet.pdf>`__"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:49 ../pro/windows/openvpn-easyrsa.rst:49
msgid ""
"A Certificate Authority (CA) using the `Nitrokey HSM 2 (pdf) "
"<https://www.nitrokey.com/files/doc/Nitrokey_HSM_factsheet.pdf>`__"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:52 ../pro/windows/openvpn-easyrsa.rst:52
msgid ""
"As a reminder, to build a Certificate Authority on Nitrokey HSM 2, you "
"may follow the instructions available `in the documentation <certificate-"
"authority.html#sign-a-server-certificate>`_."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:54 ../pro/windows/openvpn-easyrsa.rst:54
msgid ""
"Alternatively you may set up your own CA on a `on a separate machine "
"<https://www.digitalocean.com/community/tutorials/how-to-set-up-and-"
"configure-a-certificate-authority-ca-on-ubuntu-20-04>`__, or use the "
"OpenVPN tutorial which also relies on `Easy-RSA <https://openvpn.net"
"/community-resources/setting-up-your-own-certificate-authority-ca/>`__. "
"The last 2 options rely on software solutions for key management."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:59 ../pro/windows/openvpn-easyrsa.rst:59
msgid "Server side"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:62 ../pro/windows/openvpn-easyrsa.rst:62
msgid "1. Install OpenVPN"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:64 ../pro/windows/openvpn-easyrsa.rst:64
msgid "First we need to enable IP Forwarding by editing ``/etc/sysctl.conf`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:70 ../pro/windows/openvpn-easyrsa.rst:70
msgid "Uncomment or edit accordingly the following line"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:76 ../pro/windows/openvpn-easyrsa.rst:76
msgid "Close after saving it, and enter this command"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:82 ../pro/windows/openvpn-easyrsa.rst:82
msgid ""
"Once IP forwarding is done, we will need to download the latest release "
"of OpenvPN for our Debian 10 server, according to `these instructions "
"<https://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos>`__:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:84 ../pro/windows/openvpn-easyrsa.rst:84
msgid "Change to root and download the GPG key that signed the package"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:91 ../pro/windows/openvpn-easyrsa.rst:91
msgid "Add the URL of the adequate OpenVPN packages to the ``sources.list`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:98 ../pro/windows/openvpn-easyrsa.rst:98
msgid ""
"We downloaded OpenVPN 2.5 as “password prompt” requires at least OpenVPN "
"`version 2.4.8 <https://community.openvpn.net/openvpn/ticket/1215>`__ to "
"login."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:101 ../pro/windows/openvpn-easyrsa.rst:101
msgid "Next we download OpenVPN"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:107 ../pro/windows/openvpn-easyrsa.rst:107
msgid ""
"If you want to check the version, it possible by calling ``--version`` "
"and print the following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:120 ../pro/windows/openvpn-easyrsa.rst:120
msgid "2. Install Easy-RSA"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:122 ../pro/windows/openvpn-easyrsa.rst:122
msgid ""
"To build the PKI, we will download the latest version of Easy-RSA on the "
"server and client machines. To get the latest release, go to the "
"`Releases page on the official EasyRSA GitHub project "
"<https://github.com/OpenVPN/easy-rsa/releases>`__, copy the download link"
" for the file ending in ``.tgz``, and then paste it into the following "
"command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:124 ../pro/windows/openvpn-easyrsa.rst:124
msgid "Download the latest release"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:131 ../pro/windows/openvpn-easyrsa.rst:131
msgid "Extract the tarball"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:140 ../pro/windows/openvpn-easyrsa.rst:140
msgid "3. Create a PKI for OpenVPN server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:142 ../pro/windows/openvpn-easyrsa.rst:142
msgid ""
"Before you can create your OpenVPN server’s private key and certificate, "
"you need to create a local Public Key Infrastructure directory on your "
"OpenVPN server. You will use this directory to manage the server and "
"clients’ certificate requests, instead of making them directly on your CA"
" server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:144 ../pro/windows/openvpn-easyrsa.rst:144
msgid ""
"To build a PKI directory on your OpenVPN server, you’ll need to populate "
"a file called ``vars`` with some default values."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:146 ../pro/windows/openvpn-easyrsa.rst:146
msgid "Create a ``vars`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:154 ../pro/windows/openvpn-easyrsa.rst:154
msgid "Once the file is opened, paste in the following two lines"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:161 ../pro/windows/openvpn-easyrsa.rst:161
msgid ""
"These are the only two lines that you need in this ``vars`` file on your "
"OpenVPN server since it will not be used as a Certificate Authority. They"
" will ensure that your private keys and certificate requests are "
"configured to use Elliptic Curve Cryptography (ECC) to generate keys, and"
" secure signatures for your clients and OpenVPN server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:163 ../pro/windows/openvpn-easyrsa.rst:163
msgid ""
"In regards to the choice of the cryptographic algorithms, I follow the "
"model in `this tutorial <https://www.digitalocean.com/community/tutorials"
"/how-to-set-up-and-configure-an-openvpn-server-on-centos-8>`__, and you "
"can customize these according to your specific needs."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:165 ../pro/windows/openvpn-easyrsa.rst:165
msgid "Initialize the PKI"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:167 ../pro/windows/openvpn-easyrsa.rst:167
msgid ""
"Once you have populated the ``vars`` file you can proceed with creating "
"the PKI directory. To do so, run the easyrsa script with the init-pki "
"option:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:173 ../pro/windows/openvpn-easyrsa.rst:173
msgid ""
"After you’ve initialized your PKI on the OpenVPN server, you are ready to"
" move on to the next step, which is creating an OpenVPN server "
"certificate request and private key."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:176 ../pro/windows/openvpn-easyrsa.rst:176
msgid "4. Create ``server.req`` and ``server.key``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:178 ../pro/windows/openvpn-easyrsa.rst:178
msgid ""
"Now that your OpenVPN server has all the prerequisites installed, the "
"next step is to generate a key pair composed of a private key (to keep "
"secret), and a Certificate Signing Request (``.csr``) on your OpenVPN "
"server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:180 ../pro/windows/openvpn-easyrsa.rst:180
msgid ""
"In general terms, on systems where we generate a key and request, these "
"files are left unencrypted by using the ``nopass`` argument, since "
"servers usually need to start up without any password input. This "
"generates an *unencrypted key*, so mind *protect its access and file "
"permissions* carefully."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:184 ../pro/windows/openvpn-easyrsa.rst:184
msgid "Configuration notes from OpenVPN:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:186 ../pro/windows/openvpn-easyrsa.rst:186
msgid ""
"The server, and each client, must have their own cert and key file. The "
"server and all clients will use the same CA file."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:188 ../pro/windows/openvpn-easyrsa.rst:188
msgid "Server certificate should have the following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:190 ../pro/windows/openvpn-easyrsa.rst:190
msgid "``keyUsage:  digitalSignature, keyEncipherment``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:192 ../pro/windows/openvpn-easyrsa.rst:192
msgid "``extendedKeyUsage: serverAuth``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:194 ../pro/windows/openvpn-easyrsa.rst:194
msgid "Create the signing request for the server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:196 ../pro/windows/openvpn-easyrsa.rst:196
msgid ""
"Navigate to the ``~/easyrsa`` directory on your OpenVPN Server as your "
"non-root user, and enter the following commands:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:203 ../pro/windows/openvpn-easyrsa.rst:203
msgid ""
"This will create a private key for the server and a certificate request "
"file called ``server.req``."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:205 ../pro/windows/openvpn-easyrsa.rst:205
msgid ""
"Once you have a signed certificate, you’ll transfer it back to the "
"OpenVPN server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:207 ../pro/windows/openvpn-easyrsa.rst:207
msgid "Copy the key to the OpenVPN server directory"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:213 ../pro/windows/openvpn-easyrsa.rst:213
msgid ""
"After completing these steps, you have successfully created a private key"
" for your OpenVPN server. You have also generated a Certificate Signing "
"Request for the OpenVPN server."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:217 ../pro/windows/openvpn-easyrsa.rst:217
msgid "File extensions for certificate signing requests"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:219 ../pro/windows/openvpn-easyrsa.rst:219
msgid ""
"The file extension that is adopted by the CA and HSM tutorial indicates "
"the creation of a ``.csr`` file, however Easy-RSA creates certificate "
"signing requests with a ``.req`` extension."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:223 ../pro/windows/openvpn-easyrsa.rst:223
msgid ""
"We will use interchangeably both extensions, while making sure that we "
"transfer the right files to the Certificate Authority, and generate a "
"final certificate with a ``.crt`` extension."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:227 ../pro/windows/openvpn-easyrsa.rst:227
msgid ""
"In the next section of this guide, we will sign a ``.req`` file with our "
"CA on deployed on the HSM 2 device. For this purpose, I will use a "
"dedicated machine to sign the requests."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:230 ../pro/windows/openvpn-easyrsa.rst:230
msgid "5. Sign and retrieve ``server.crt``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:232 ../pro/windows/openvpn-easyrsa.rst:232
msgid ""
"The following instructions require the transfer of the ``server.req`` (or"
" ``server.csr``) file to the CA system."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:235 ../pro/windows/openvpn-easyrsa.rst:235
msgid ""
"The transfer itself is not security sensitive, though it is wise to "
"verify if the received file matches the sender’s copy, if the transport "
"is untrusted."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:237 ../pro/windows/openvpn-easyrsa.rst:237
msgid ""
"In order to go through these steps, I will extensively rely on `these "
"instructions <certificate-authority.html#creating-the-intermediate-"
"certificate-authority>`_, to sign the certificate signing requests, once "
"we generated them with Easy-RSA."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:239 ../pro/windows/openvpn-easyrsa.rst:239
msgid "Sign the ``server.req`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:241 ../pro/windows/openvpn-easyrsa.rst:241
msgid ""
"On the local machine dedicated to access the HSM, we will use the tools "
"provided by Opensc 0.20 in order to sign the ``.req`` file, and send it "
"back to the OpenVPN server. We assume we have transferred the file from "
"the server machine to the CA machine."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:243 ../pro/windows/openvpn-easyrsa.rst:243
msgid ""
"First we start by plugging the HSM Nitrokey, and enter this instruction "
"for listing the keys available."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:245 ../pro/windows/openvpn-easyrsa.rst:245
msgid "Query the list of available devices"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:251
msgid ""
"**(Required step)** If this is the first time you sign a certificate with"
" the CA, you might want to retrieve the URI of the CA’s private key from "
"the HSM, and include it in the config file."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:254 ../pro/windows/openvpn-easyrsa.rst:253
msgid "The key’s URI should be in this format:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:260 ../pro/windows/openvpn-easyrsa.rst:259
msgid "Create ``openvpn/`` directory under ``certificate-authority/``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:267 ../pro/windows/openvpn-easyrsa.rst:266
msgid "Sign the ``server.req``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:273 ../pro/windows/openvpn-easyrsa.rst:272
msgid "Retrieve the ``server.crt`` file to the server machine"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:275 ../pro/windows/openvpn-easyrsa.rst:274
msgid "Transfer the signed certificates to the server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:277 ../pro/windows/openvpn-easyrsa.rst:276
msgid ""
"From the CA machine, copy the files ``server.crt`` and ``chain.crt`` to "
"the OpenVPN server. In this example we will use the ``scp`` command as "
"following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:283 ../pro/windows/openvpn-easyrsa.rst:282
msgid "Place the certificates on the server’s directory"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:291 ../pro/windows/openvpn-easyrsa.rst:290
msgid "CA Certificate and ``chain.crt``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:293 ../pro/windows/openvpn-easyrsa.rst:292
msgid ""
"In the above, the CA returns the signed sever certificate, and includes "
"the CA certificate ``CA.crt`` which is the ``chain.crt`` file. This can "
"be done over an insecure channel, though the client is encouraged to "
"confirm if the received ``chain.crt`` is valid, if the transport is "
"untrusted."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:299 ../pro/windows/openvpn-easyrsa.rst:298
msgid ""
"It is possible to rename the file ``chain.crt`` file to ``CA.crt`` on the"
" target machine, however we will use ``chain.crt`` in the next "
"instructions."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:304 ../pro/windows/openvpn-easyrsa.rst:303
msgid "6. Configure the OpenVPN server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:306 ../pro/windows/openvpn-easyrsa.rst:305
msgid ""
"A connection that uses TLS requires multiple `certificates and keys for "
"authentication <https://wiki.teltonika-"
"networks.com/view/OpenVPN_configuration_examples>`__. Now that we issued "
"and signed those, we can place them in the right directories. The "
"breakdown of the certificates and keys that must be located at the root "
"directory are the following:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:317 ../pro/windows/openvpn-easyrsa.rst:316
msgid ""
"On your OpenVPN server, now you can create the configuration file "
"``server.conf`` with your favorite text editor. The file can be "
"configured according to your needs, while we make sure to change the "
"server certificate and key sections according the names you chose for the"
" your the files we signed:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:326 ../pro/windows/openvpn-easyrsa.rst:325
msgid "Here is the configuration file we can use for testing these instructions:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:356 ../pro/windows/openvpn-easyrsa.rst:355
msgid "To test if the configuration functions properly, we can use this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:363 ../pro/windows/openvpn-easyrsa.rst:362
msgid "7. Start the OpenVPN service on the server"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:365 ../pro/windows/openvpn-easyrsa.rst:364
msgid ""
"Enable the OpenVPN service by adding it to systemctl, and start it using "
"these commands:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:372 ../pro/windows/openvpn-easyrsa.rst:371
msgid "To Double check if the OpenVPN service is active use this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:378 ../pro/windows/openvpn-easyrsa.rst:377
msgid "The OpenVPN should be running at this point."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:383 ../pro/windows/openvpn-easyrsa.rst:382
msgid "Client side configuration"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:386 ../pro/windows/openvpn-easyrsa.rst:385
msgid "1. Install OpenVPN and Easy-RSA"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:388 ../pro/windows/openvpn-easyrsa.rst:387
msgid "Install the software"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:390 ../pro/windows/openvpn-easyrsa.rst:389
msgid ""
"We can use directly ``dnf install`` to install OpenVPN 2.4.9 and Easy-RSA"
" 3.0.7"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:396 ../pro/windows/openvpn-easyrsa.rst:395
msgid "Then we create as non-root a directory for Easy RSA called ``Easy-RSA``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:402 ../pro/windows/openvpn-easyrsa.rst:401
msgid "And link it to the Easy RSA package we just installed"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:409 ../pro/windows/openvpn-easyrsa.rst:408
msgid "2. Create a PKI for the OpenVPN client"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:411 ../pro/windows/openvpn-easyrsa.rst:410
msgid ""
"In the same manner we created a PKI on the OpenVPN server, we will create"
" a PKI using Easy-RSA on the client side."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:414 ../pro/windows/openvpn-easyrsa.rst:413
msgid "3. Create a ``client.req`` and ``client.key``"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:416 ../pro/windows/openvpn-easyrsa.rst:415
msgid ""
"In the same manner we issued the key pair on the sever, we generate a key"
" pair for the client which will be composed of the ``client.req`` file "
"and the ``client.key`` file. The latter must be kept secret on the client"
" machine."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:420 ../pro/windows/openvpn-easyrsa.rst:419
msgid "4. Sign ``client.req`` and issue the ``client.crt`` file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:422 ../pro/windows/openvpn-easyrsa.rst:421
msgid ""
"To transfer the ``client.req`` file to the CA machine, we will use the "
"same method as we did for the ``server.req`` file."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:424 ../pro/windows/openvpn-easyrsa.rst:423
msgid ""
"Once transferred, on the CA machine we sign the certificate signing "
"request file with this command"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:431 ../pro/windows/openvpn-easyrsa.rst:430
msgid "5. Import ``client.crt`` on the Nitrokey from the CA machine"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:433 ../pro/windows/openvpn-easyrsa.rst:432
msgid ""
"After creating the ``client.crt`` file, we plug the Nitrokey Pro 2 device"
" in the CA machine, and import the ``.crt`` to the Pro 2 device using "
"this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:439 ../pro/windows/openvpn-easyrsa.rst:438
msgid ""
"You can see if the key is effectively stored on the Nitrokey using this "
"command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:445 ../pro/windows/openvpn-easyrsa.rst:444
msgid "Or alternatively"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:451 ../pro/windows/openvpn-easyrsa.rst:450
msgid ""
"Fore more commands you can refer to the `OpenSC wiki "
"<https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:454 ../pro/windows/openvpn-easyrsa.rst:453
msgid "6. Retrieve the ``chain.crt`` file from the CA machine"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:456 ../pro/windows/openvpn-easyrsa.rst:455
msgid ""
"While we keep the ``client.crt``\\ stored on the nitrokey Pro 2 device, "
"we must retrieve the ``chain.crt`` file on the client machine, and store "
"it in the adequate directory. We may use ``scp`` as in the method "
"explained in the server section of this guide."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:459 ../pro/windows/openvpn-easyrsa.rst:458
msgid "7. Configure the client to interact with the Nitrokey"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:461 ../pro/windows/openvpn-easyrsa.rst:460
msgid ""
"Now back on the client machine, we will plug the Nitrokey Pro and use it "
"to establish the VPN connection with the server. In general terms, a "
"connection that uses TLS requires multiple certificates and keys for "
"authentication:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:470 ../pro/windows/openvpn-easyrsa.rst:469
msgid ""
"For this guide we can the following ``client.conf`` file, and add the "
"required options to it accordingly:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:492 ../pro/windows/openvpn-easyrsa.rst:491
msgid "Determine the correct object"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:494 ../pro/windows/openvpn-easyrsa.rst:493
msgid ""
"Each PKCS#11 provider can support multiple devices. In order to view the "
"available object list you can use the following command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:510 ../pro/windows/openvpn-easyrsa.rst:509
msgid ""
"Each certificate/private key pair have unique ``Serialized id`` string. "
"The serialized id string of the requested certificate should be "
"specified, in the configuration file. We can do this by adding the "
"``pkcs11-id`` option using single quote marks."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:516 ../pro/windows/openvpn-easyrsa.rst:515
msgid "Add retrieved Serialized ID to the configuration file"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:518 ../pro/windows/openvpn-easyrsa.rst:517
msgid ""
"Using your favorite text editor, open the server.conf file, and add the "
"following lines, while taking care to insert your own ``Serialized id``:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:525 ../pro/windows/openvpn-easyrsa.rst:524
msgid ""
"For additional `settings related to OpenVPN <https://openvpn.net"
"/community-resources/how-to/>`__ authentication, you may also add few "
"lines to handle key maganagement, although it is optional."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:529 ../pro/linux/openvpn-easyrsa.rst:553
#: ../pro/windows/openvpn-easyrsa.rst:528
#: ../pro/windows/openvpn-easyrsa.rst:552
msgid "Click to view the code"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:546 ../pro/windows/openvpn-easyrsa.rst:545
msgid "Optional step"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:549 ../pro/windows/openvpn-easyrsa.rst:548
msgid ""
"If you need to test the configuration, with and without the token on the "
"Nitrokey, you may add lines to the same ``client.conf`` and "
"comment/uncomment the relevant lines according to your needs:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:563 ../pro/windows/openvpn-easyrsa.rst:562
msgid "Configure the OpenVPN client"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:565 ../pro/windows/openvpn-easyrsa.rst:564
msgid "The final configuration file ``client.conf`` should look like this one:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:608 ../pro/windows/openvpn-easyrsa.rst:631
msgid "Known issues"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:610 ../pro/windows/openvpn-easyrsa.rst:633
msgid ""
"There are some known issues related to OpenVPN login with OpenSC. Please "
"consult these issues `here <https://github.com/Nitrokey/wiki/wiki/3rd-"
"Party-Issues>`__."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:613 ../pro/windows/openvpn-easyrsa.rst:636
msgid "8. Start the OpenVPN client"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:615 ../pro/windows/openvpn-easyrsa.rst:638
msgid "Start the OpenVPN service on the client"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:617 ../pro/windows/openvpn-easyrsa.rst:640
msgid "Enable the OpenVPN service, and start it using these commands:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:624 ../pro/windows/openvpn-easyrsa.rst:647
msgid "To double check if the OpenVPN service is active use this command:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:630 ../pro/windows/openvpn-easyrsa.rst:653
msgid "Enter your User PIN"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:632 ../pro/windows/openvpn-easyrsa.rst:655
msgid "When executing OpenVPN client, Nitrokey’s PIN needs to be entered:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:644
msgid ""
"Unfortunately OpenVPN doesn’t seem to be able to establish a handshake "
"and stops at an error as reported `here <https://support.nitrokey.com/t"
"/nitrokey-pro-with-openssl-1-1-1-tls-1-3-and-rsa-based-"
"certificates/2180/2>`__, `here <https://support.nitrokey.com/t/openvpn-"
"openssl-error-141f0006/2637>`__ and `here "
"<https://community.openvpn.net/openvpn/ticket/1215>`__"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:674 ../pro/windows/openvpn-easyrsa.rst:666
msgid ""
"In some reported cases it does not prompt for a PIN on the terminal. One "
"workaround would be to use to use this command to login with the PIN:"
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:680 ../pro/windows/openvpn-easyrsa.rst:672
msgid ""
"Alternatively, you could `recompile OpenVPN "
"<https://forums.openvpn.net/viewtopic.php?f=4&t=23318>`__ client with "
"systemd support disabled, and it will prompt you for the PIN as expected."
msgstr ""

#: ../pro/linux/openvpn-easyrsa.rst:682 ../pro/windows/openvpn-easyrsa.rst:674
msgid ""
"Another option, would be to login to your OpenVPN instance with the "
"Viscosity client which provides a better user experience especially for "
"entering the PIN."
msgstr ""

#: ../pro/otp.rst.inc:2
msgid "Two-factor Authentication with One-Time Passwords (OTP)"
msgstr ""

#: ../pro/otp.rst.inc:6
msgid ""
"The use of One-time Passwords (OTP) is called very differently on the "
"various services supporting it. Sometimes it is referred to as Multi-"
"factor Authentication (MFA), sometimes it is Two-factor Authentication "
"(2FA) or just “authentication via authenticator app” like Google "
"Authenticator. Most of these services are compatible for usage with the "
"Nitrokey Pro and Nitrokey Storage. The following instructions show how to"
" enable OTP on our `support forum <https://support.nitrokey.com/>`__. The"
" procedure is quite similar on most services. For a list of websites "
"supporting OTP have a look at `dongleauth.com "
"<https://www.dongleauth.com/>`__."
msgstr ""

#: ../pro/otp.rst.inc:8
msgid ""
"You need to have the `Nitrokey App <https://www.nitrokey.com/download>`__"
" installed to use the OTP feature of the Nitrokey Pro and Nitrokey "
"Storage."
msgstr ""

#: ../pro/otp.rst.inc:11
msgid "Configure a Website/Application to Use OTP"
msgstr ""

#: ../pro/otp.rst.inc:13
msgid ""
"Login to the website which supports OTP (in this example, the `support "
"forum <https://support.nitrokey.com/>`__). Usually you find the option to"
" enable two-factor-authentication under your profile or in the settings."
msgstr ""

#: ../pro/otp.rst.inc:20
msgid ""
"Most of the time, you will get a QR-Code as seen below. There should be "
"an option, to show the secret key directly."
msgstr ""

#: ../pro/otp.rst.inc:27
msgid "We need to copy the secret code."
msgstr ""

#: ../pro/otp.rst.inc:29
msgid ""
"This is what the Nitrokey is actually protecting. You may create a backup"
" of it now (in case the Nitrokey get lost or breaks) by writing it down "
"on a sheet of paper and storing it securely. But be aware that anybody "
"who is in possession of this secret code, can create one-time passwords "
"for your account! *Please note that you won’t be able to backup this "
"code, once it is stored in the Nitrokey!*"
msgstr ""

#: ../pro/otp.rst.inc:36
msgid "Now start the Nitrokey App and open the “OTP Slot Configuration”."
msgstr ""

#: ../pro/otp.rst.inc:43
msgid ""
"Paste in the secret key in the corresponding field and choose an "
"appropiate slot name. Click on “Save” and type in your admin PIN if "
"requested."
msgstr ""

#: ../pro/otp.rst.inc:50
msgid ""
"After saving the slot you can go to “Menu” -> “Passwords” -> YourSlotName"
" to get your very first one-time password."
msgstr ""

#: ../pro/otp.rst.inc:58
msgid ""
"The one-time password is copied to your clipboard automatically. You just"
" need to paste it to the field on the website to confirm the correct "
"setup and thus to activate the two-factor authentication."
msgstr ""

#: ../pro/otp.rst.inc:66
msgid "Securely Login to Website/Application"
msgstr ""

#: ../pro/otp.rst.inc:68
msgid ""
"From now on you will get asked for a one-time password additionally to "
"your other credentials if you try to login the the website. You just need"
" to open the Nitrokey App and go to “Menu” -> “Passwords” -> YourSlotName"
" again to get the one-time password."
msgstr ""

#: ../pro/smime.rst.inc:2
msgid "S/MIME Email Encryption"
msgstr ""

#: ../pro/smime.rst.inc:15
msgid ""
"If you are in doubt which one to choose, you should use OpenPGP, see "
"`here <openpgp.html>`_. This page describes the usage of S/MIME email "
"encryption."
msgstr ""

#: ../pro/smime.rst.inc:17
msgid ""
"You need to purchase a S/MIME certificate (e.g. at `CERTUM "
"<https://www.certum.eu/en/cert_offer_cert_id/>`__) or may already got one"
" by your company. Furthermore, you need to install `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While "
"GNU/Linux users usually can install OpenSC over the package manager (e.g."
" ``sudo apt install opensc`` on Ubuntu), macOS and Windows users can "
"download the installation files from the `OpenSC "
"<https://github.com/OpenSC/OpenSC/releases>`__ page."
msgstr ""

#: ../pro/smime.rst.inc:20
msgid "Import Existing Key and Certificate"
msgstr ""

#: ../pro/smime.rst.inc:2 ../pro/smime.rst.inc:22
msgid ""
"The following instructions are based on the `wiki of OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`__. We will assume, "
"that you already got a key-certificate pair as a .p12 file. Please have a"
" look at the wiki page, if you got a separate key and certificate file."
msgstr ""

#: ../pro/smime.rst.inc:6 ../pro/smime.rst.inc:26
msgid ""
"To make these commands as simple as possible, the .p12 file needs to be "
"in your home folder. On Windows this is usually "
"``C:\\Users\\yourusername`` and on macOS and GNU/Linux system it will be "
"``/home/yourusername``. If you do not store the .p12 file there, you have"
" to adapt the path in the commands below. Please plug in the Nitrokey "
"before submitting the commands."
msgstr ""

#: ../pro/smime.rst.inc:8 ../pro/smime.rst.inc:28
msgid ""
"Assuming that your key-certificate file reads ‘myprivate.p12’ the "
"commands for Windows looks like this:"
msgstr ""

#: ../pro/smime.rst.inc:15 ../pro/smime.rst.inc:35
msgid "and on macOS and GNU/Linux it will be"
msgstr ""

#: ../pro/smime.rst.inc:22 ../pro/smime.rst.inc:42
msgid ""
"The two commands copy the key-certificate pair to the slot 2 (needed for "
"decrypting emails) and slot 3 (needed for signing). The output looks on "
"both systems something like this:"
msgstr ""

#: ../pro/smime.rst.inc:29 ../pro/smime.rst.inc:49
msgid ""
"Please note that there will be error messages that can be safely ignored "
"(see output example above). You now have the key-certificate pair loaded "
"on the Nitrokey."
msgstr ""

#: ../pro/smime.rst.inc:36 ../pro/smime.rst.inc:56
msgid "for using `S/MIME encryption on Thunderbird <smime-thunderbird.html>`_"
msgstr ""

#: ../pro/smime.rst.inc:39 ../pro/smime.rst.inc:59
msgid "for using `S/MIME encryption on Outlook <smime-outlook.html>`_"
msgstr ""

#: ../pro/smime.rst.inc:42 ../pro/smime.rst.inc:62
msgid ""
"for using `Evolution <https://help.gnome.org/users/evolution/stable/mail-"
"encryption.html.en>`__, an email client for the Gnome Desktop on Linux "
"systems"
msgstr ""

#: ../pro/smime-outlook.rst.inc:2
msgid "S/MIME Email Encryption with Outlook"
msgstr ""

#: ../pro/smime-outlook.rst.inc:9
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet, please look at `this page <smime.html>`_ first."
msgstr ""

#: ../pro/smime-outlook.rst.inc:11
msgid ""
"You need to have OpenSC installed on your System. Please have a look at "
"the `wiki page of the OpenSC project "
"<https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/smime-outlook.rst.inc:15 ../pro/smime-thunderbird.rst.inc:15
#: ../pro/windows/smime.rst:5
msgid ""
"Windows users with 64-bit system (standard) need to install both, the "
"32-bit and the 64-bit version of OpenSC!"
msgstr ""

#: ../pro/smime-outlook.rst.inc:19
msgid "Settings in Outlook"
msgstr ""

#: ../pro/smime-outlook.rst.inc:21
msgid ""
"Before you can use the Nitrokey in Outlook you have to activate S/MIME "
"encryption. You can achieve this by clicking on to ‘Start’ -> ‘Options’ "
"and clicking on ‘Trust Center’ in the options window. In section ‘Email "
"Security’ you can choose your S/MIME identity. Your certificate should "
"already be recognized by Outlook."
msgstr ""

#: ../pro/smime-outlook.rst.inc:36
msgid ""
"When composing a mail you can now choose to encrypt and sign the message "
"in the ‘Options’ ribbon of the compose window."
msgstr ""

#: ../pro/smime-outlook.rst.inc:43
msgid ""
"Outlook will only encrypt message to mail addresses which are saved in "
"your address book. So make sure, that the persons you want to write an "
"encrypted mail to have an entry in Outlook’s contacts. You can ask the "
"person to write you a signed mail, so that you can import the certificate"
" information."
msgstr ""

#: ../pro/smime-outlook.rst.inc:45
msgid ""
"Depending on your certificate or the certificate of your partners you may"
" have to import a so-called root certificate. This is the certificate of "
"the party which issued the certificate you or your partner uses. You "
"should usually got informed if this is necessary."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:2
msgid "S/MIME Email Encryption with Thunderbird"
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:9
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet or if you did not installed OpenSC, please look at `this "
"page <smime.html>`_ first."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:11
msgid ""
"You need to have `OpenSC installed "
"<https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While "
"GNU/Linux users usually can install OpenSC over the package manager (e.g."
" ``sudo apt update && sudo apt install opensc`` on Ubuntu), macOS and "
"Windows users can download the installation files from OpenSC directly."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:19
msgid "Settings in Thunderbird"
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:21
msgid ""
"Before you can use the Nitrokey in Thunderbird you have to activate "
"S/MIME encryption in the account settings. You can achieve this by "
"clicking on the menu and go to ‘Preferences’ -> ‘Account Settings’ and "
"clicking on ‘Security’ in the account settings window."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:28
msgid ""
"Click on “Security Devices” to import the right PCKS11 module. Click on "
"“Load” on the right-hand side. Now give the Module a name (like “OpenSC "
"Module”) and click on “Browse” to choose the location of the Module (see "
"below)."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:35
msgid ""
"On Windows the right file lays under “C:\\Windows\\System32\\opensc-"
"pkcs11.dll”. On macOS and GNU/Linux the file should be in “/lib/pkcs11"
"/opensc-pkcs11.so” or “/usr/lib/pkcs11/opensc-pkcs11.so” or alike. Press "
"“OK” twice and you are back in security section of the account settings. "
"Now you can actually choose a certificate on the upper part of the "
"window. You should get asked for a PIN to unlock your Nitrokey. Please "
"type in your User PIN."
msgstr ""

#: ../pro/smime-thunderbird.rst.inc:45
msgid ""
"When composing an email you can now choose to encrypt and sign the "
"message."
msgstr ""

#: ../pro/linux/ssh.rst:2
msgid "SSH For Server Administration"
msgstr ""

#: ../pro/ssh.rst:1
msgid ""
"This guide explains how to prepare your SSH server and client for use "
"with the Nitrokey."
msgstr ""

#: ../pro/ssh.rst:3
msgid ""
"The Nitrokey should already have PGP keys installed and the local GnuPG "
"keyring should know the keys."
msgstr ""

#: ../pro/ssh.rst:6
msgid "Preparation on client"
msgstr ""

#: ../pro/ssh.rst:8
msgid "Make sure ~/.gnupg/gpg.conf contains 'use-agent'"
msgstr ""

#: ../pro/ssh.rst:9
msgid ""
"Add ssh support to gnupg-agent by adding 'enable-ssh-support' to ~/.gnupg"
"/gpg-agent.conf"
msgstr ""

#: ../pro/ssh.rst:10
msgid "If the file does not exist yet, you can just create it."
msgstr ""

#: ../pro/ssh.rst:11
msgid ""
"Add the following code somewhere into your ~/.bashrc (for fish shell, "
"look `here <https://support.nitrokey.com/t/ssh-auth-with-fish-instead-of-"
"bash/2206>`__)"
msgstr ""

#: ../pro/ssh.rst:20
msgid ""
"Simply restart your system or try ``pkill gpg-agent`` and open a new "
"commandline to make sure everything is set"
msgstr ""

#: ../pro/ssh.rst:21
msgid ""
"In case of problems, please try ``gpg2 --card-status`` on first usage to "
"make sure the gpg-agent gets started"
msgstr ""

#: ../pro/ssh.rst:24
msgid "Preparation for the server"
msgstr ""

#: ../pro/ssh.rst:26
msgid "You can generate an authorized_keys file by running either"
msgstr ""

#: ../pro/ssh.rst:32
msgid "where"
msgstr ""

#: ../pro/ssh.rst:38
msgid ""
"is the subkey id being used for authentication on your Nitrokey. The "
"Nitrokey must already be known to the local GnuPG keyring. You can now "
"append that file to a remote server's authorized_keys and when you ssh to"
" the server you'll be asked for a pin rather than a passphrase."
msgstr ""

#: ../pro/ssh.rst:44
msgid "If you are still being asked for a password please make sure that"
msgstr ""

#: ../pro/ssh.rst:50
msgid ""
"returns something like '/run/user/1000/gnupg/S.gpg-agent.ssh' or "
"'/home/username/.gnupg/.S.gpg-agent.ssh'. Unfortunately there were some "
"changes in GnuPG in the past so that the actual content can differ from "
"system and GnuPG version. On some systems there may are even multiple "
"folders in this variable saved. You have to adapt the above given code in"
" .bashrc so that the variable SSH_AUTH_SOCK is correct. In doubt look for"
" 'SSH_AUTH_SOCK' in"
msgstr ""

#: ../pro/ssh.rst:56
msgid "to find the actual code for your version/system."
msgstr ""

#: ../pro/ssh.rst:58
msgid ""
"You may check if you have a 'pinentry' program installed via your package"
" manager. You may need to `set it in the gpg-agent.conf "
"<https://wiki.archlinux.org/index.php/GnuPG#pinentry>`__ as well. You may"
" need to `point gpg-agent to the correct TTY "
"<https://wiki.archlinux.org/index.php/GnuPG#Configure_pinentry_to_use_the_correct_TTY>`__."
msgstr ""

#: ../pro/linux/stunnel.rst:2
msgid "Stunnel"
msgstr ""

#: ../hsm/stunnel.rst.inc:3
msgid ""
"`Stunnel <https://www.stunnel.org/>`__ works as an SSL encryption wrapper"
" between remote client and local (inetd-startable) or remote server. It "
"can be used to add SSL functionality to commonly used inetd daemons like "
"POP2, POP3, and IMAP servers without any changes in the programs' code."
msgstr ""

#: ../hsm/stunnel.rst.inc:5
msgid "Stunnel is able to load OpenSC PKCS#11 engine using this configuration:"
msgstr ""

#: ../pro/hard-disk-encryption.rst.inc:10
msgid ""
"Follow these steps to use the program with `Nitrokey "
"<https://shop.nitrokey.com/>`__:"
msgstr ""

#: ../pro/mac/index.rst:2
msgid "Nitrokey Pro, Mac"
msgstr ""

#: ../pro/mac/index.rst:13
msgid ""
"Once you plug in the Nitrokey, your computer will start the Keyboard "
"Setup Assistant. **Don’t run through this assistant but exit it right "
"away.**"
msgstr ""

#: ../pro/mac/index.rst:30
msgid ""
"For some Versions of MacOS it is necessary to install custom `ccid driver"
" <https://github.com/martinpaljak/osx-ccid-installer>`__ (for information"
" see `here <https://ludovicrousseau.blogspot.com/2016/04/os-x-el-capitan-"
"and-ccid-driver-upgrades.html>`__), but in general MacOS should have the "
"driver onboard."
msgstr ""

#: ../pro/mac/index.rst:36 ../pro/windows/index.rst:32
msgid ""
"For many use cases described, it is necessary to have either OpenPGP or "
"S/MIME keys installed on the device (see below)."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:2
msgid "Two-factor Authentication for Microsoft Account"
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:6
msgid ""
"These are the basic steps for registering the Nitrokey Pro or Nitrokey "
"Storage as a second factor of a Microsoft account."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:8
msgid ""
"Visit https://account.live.com/proofs/Manage/additional and log in to "
"your Microsoft account if prompted."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:20
msgid "Click on “Set up two-step verification”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:27
msgid "Click on “Next”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:34
msgid "Now it is important to click on “set up a different Authenticator app”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:41
msgid "Click on “I can’t scan the bar code”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:48
msgid "Insert and save secret code into the Nitrokey App."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:65
msgid "Enter code generated by Nitrokey App to confirm."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:77
msgid "Click “Next” and then “Finish”."
msgstr ""

#: ../pro/windows/2fa-microsoft.rst:89
msgid ""
"From now on, when signing in you need an OTP additionally to your "
"password."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:2
msgid "Login With EIDAuthenticate on Stand Alone Windows Computers"
msgstr ""

#: ../pro/eidauthenticate.rst.inc:6
msgid ""
"Download and install the latest version of `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__. Please install the `OpenPGP-"
"CSP <https://github.com/vletoux/OpenPGP-CSP/releases/tag/1.3>`__ driver "
"**instead** if using Nitrokey Storage 2 or Nitrokey Pro 2."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:7
msgid ""
"Download and install `EIDAuthenticate "
"<https://www.mysmartlogon.com/eidauthenticate/>`__."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:10
msgid ""
"The free community edition is disabled. You may test the enterprise "
"edition instead."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:12
msgid "Start EIDConfigurationWizard.exe"
msgstr ""

#: ../pro/eidauthenticate.rst.inc:13
msgid "Select “Associate a new certificate”"
msgstr ""

#: ../pro/eidauthenticate.rst.inc:20
msgid ""
"Select or generate a Certificate Authority which should issue the user’s "
"certificate on the Nitrokey."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:28
msgid ""
"Enter the user PIN which you defined previously in step 4. Wait a moment "
"until a new keypair and certificate are generated. In case your Nitrokey "
"is not detected you may want to execute “certutil -scinfo” for "
"troubleshooting."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:38
msgid "Select the newly generated certificate and press continue."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:45
msgid "All checks should succeed. Press continue."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:52
msgid "Enter the password of your user account."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:59
msgid "Enter the user PIN which you defined previously in step 4."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:66
msgid "The final screen may look like this."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:73
msgid ""
"You may perform further configurations such as activate the force smart "
"card policy or automatically lock the computer when removing the Nitrokey"
" (by using EIDConfigurationWizardElevated.exe)."
msgstr ""

#: ../pro/eidauthenticate.rst.inc:75 ../pro/smart-policy.rst.inc:93
msgid ""
"From now on, when logging on to your Windows computer you need to connect"
" the Nitrokey and enter your PIN."
msgstr ""

#: ../pro/windows/index.rst:2
msgid "Nitrokey Pro, Windows"
msgstr ""

#: ../pro/windows/index.rst:14
msgid "Getting Started"
msgstr ""

#: ../pro/windows/index.rst:16
msgid ""
"Connect your Nitrokey to your computer and confirm all dialogs so that "
"the USB smart card device driver gets installed almost automatically. "
"Windows may fail to install an additional device driver for the smart "
"card. Its safe to ignore this warning."
msgstr ""

#: ../pro/windows/index.rst:20
msgid ""
"Download and start the `Nitrokey App "
"<https://www.nitrokey.com/download>`__."
msgstr ""

#: ../pro/windows/index.rst:22
msgid ""
"Go to “Menu” -> “Configure” to change the User PIN (default: 123456) and "
"Admin PIN (default: 12345678) to your own choices."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:2
msgid "Windows Login and S/MIME Email Encryption with Active Directory"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:6
msgid ""
"Please note that this driver is still in development/testing. Please tell"
" us your experiences! See our `contact page "
"<https://www.nitrokey.com/contact>`__."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:11
msgid ""
"This guide assumes that an Active Directory server with role ‘Active "
"Directory Certificate Services’ is installed and running on a server. "
"These instructions are based on Nitrokey Storage 2 and Nitrokey Pro 2 "
"only."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:14
msgid "Installing OpenPGP-CSP"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:16
msgid ""
"This step is needed for clients to use the OpenPGP-CSP driver. Download "
"and install the `latest version <https://github.com/vletoux/OpenPGP-"
"CSP/releases/tag/1.3>`__ of the installer file ‘SetupOpenPGPCsp’ for your"
" system architecture, for ‘SetupOpenPGPCsp_x64.msi’ for 64-bit systems."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:18
msgid ""
"You may want to install the driver on the server as well for being able "
"to enforce the use of this driver in the template (see below)."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:21
msgid "Creating Certificate Template on Server Side"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:23
msgid ""
"On Active Directory Server open certsrv.msc to manage your certificate "
"templates. Right click on ‘Certificate Templates’ and choose ‘Manage’"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:30
msgid ""
"Now right click on ‘Smartcard Logon’ template and click ‘Duplicate’, to "
"create a new template on basis of this standard template. Rename template"
" to ‘OpenPGP Card Logon and Email’ or alike."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:37
msgid ""
"Under ‘Request Handling’, you can choose the OpenPGP-CSP as the one and "
"only Cryptography Service Provider (click the Button labeled ‘CSPs…’). "
"For this to work, you need to install the driver on the server as well "
"and you have to insert a Nitrokey beforehand. This is optional. You can "
"let the user choose, which CSP to use."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:49
msgid ""
"For enabling S/MIME email encryption go to ‘Subject name’. Tick the "
"checkbox ‘E-Mail name’ (note: You must save the mail addresses of your "
"users in the corresponding Active Directory field!)."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:56
msgid ""
"Then go to ‘Extensions’, there you edit the applications guideline and "
"add ‘Secure Email’."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:69
msgid "Request Certificate on Client (Domain Member)"
msgstr ""

#: ../pro/windows/openpgp-csp.rst:71
msgid ""
"To request a certificate for a domain member, you have to open "
"certmgr.msc. Right click on folder ‘Personal->Certificates’ and click "
"’All Tasks->Request New Certificate and choose the template you created "
"on the AD."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:79
msgid ""
"If you did not enforce the usage of OpenPGP-CSP you have to choose it "
"here now."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:91
msgid "Next you choose the Authentication slot for the certificate."
msgstr ""

#: ../pro/windows/openpgp-csp.rst:93
msgid ""
"You are now ready to logon on the computer with the Nitrokey instead of "
"your password and you can use `S/MIME email encryption/signing "
"<smime.html>`_ with the Nitrokey. The driver has to be installed on every"
" computer you want to use the certificate on."
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:15
msgid ""
"To sign the certificates, we will use a `Nitrokey HSM 2 "
"<https://shop.nitrokey.com/shop/product/nk-pro-2-nitrokey-pro-2-3>`__ set"
" up as `Certificate Authority <../../hsm/windows/certificate-"
"authority.html#creating-the-intermediate-certificate-authority>`_, "
"however this guide does not cover the set up of the CA itself (it is "
"clear and `well documented here <../../hsm/windows/certificate-"
"authority.html#sign-a-server-certificate>`_)."
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:607
msgid "Configure OpenVPN"
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:609
msgid ""
"In order to establish a handshake, you must configure OpenSSL included in"
" OpenVPN."
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:611
msgid ""
"Create the directory ``ssl`` in ``C:\\Program Files\\OpenVPN`` and create"
" file ``openssl.cnf`` with the following content :"
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:613
msgid "openssl_conf = default_conf"
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:615
msgid "[ default_conf ] ssl_conf = ssl_sect"
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:618
msgid "[ ssl_sect ] system_default = ssl_default_sect"
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:621
msgid ""
"[ ssl_default_sect ] SignatureAlgorithms = "
"RSA+SHA512:ECDSA+SHA512:RSA+SHA384:ECDSA+SHA384:RSA+SHA256:ECDSA+SHA256 "
"MaxProtocol = TLSv1.2 MinProtocol = TLSv1.2"
msgstr ""

#: ../pro/windows/openvpn-easyrsa.rst:627
msgid ""
"With this modification, you will not have error as reported `here "
"<https://support.nitrokey.com/t/nitrokey-pro-with-openssl-1-1-1-tls-1-3"
"-and-rsa-based-certificates/2180/2>`__, `here "
"<https://support.nitrokey.com/t/openvpn-openssl-error-141f0006/2637>`__ "
"and `here <https://community.openvpn.net/openvpn/ticket/1215>`__"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:6
msgid "Viscosity Client Configuration with OpenVPN"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:10
msgid ""
"This guide will show to configure `Viscosity client "
"<https://www.sparklabs.com/viscosity/>`__ to connect to an OpenVPN "
"instance, using a `Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product"
"/nk-pro-2-nitrokey-pro-2-3>`__ (or `Nitrokey Storage 2 "
"<https://shop.nitrokey.com/shop/product/nitrokey-storage-2-56>`__), and "
"`PKCS#11 authentication <https://openvpn.net/community-resources/how-to"
"/#what-is-pkcs11>`__."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:17
msgid ""
"For this guide, you will need an OpenVPN remote server installed and "
"configured for clients. For the purpose of this document, we have used "
"OpenVPN 2.49 installed on a Debian 10 server."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:19
msgid ""
"To read about how to configure OpenVPN to authenticate with Nitrokey Pro,"
" you might consult the following `documentation <openvpn-easyrsa.html>`_,"
" as we will just cover the way to configure the Viscosity client in this "
"guide."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:21
msgid "You will also need the following:"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:23
msgid "A Nitrokey Pro 2 or Nitrokey Storage 2"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:25
msgid "Client’s private key ``client.key`` loaded on the Nitrokey"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:27
msgid "Client’s certificate ``client.crt`` loaded on the Nitrokey"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:29
msgid ""
"The Certificate Authority file, i.e. ``CA.crt`` file used for your "
"OpenVPN setup"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:32
msgid "Optional: The shared secret key file, i.e. ``ta.key``"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:34
msgid ""
"For more information on ``PKCS#11`` key management with OpenVPN, please "
"consult OpenVPN’s `documentation. <https://openvpn.net/community-"
"resources/how-to/>`__"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:39
msgid ""
"Start Viscosity and create a new connection “openVPN” (you can name it as"
" you wish)"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:46
msgid "Right click on the connection and click edit"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:52
msgid ""
"Add your server’s IP address and configure the port according to your "
"configuration."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:55
msgid ""
"Under authentication, In ``Type`` scroll down to ``SSL/TLS Client "
"(PKCS11)``"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:58
msgid "Select the CA file for your connection"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:60
msgid "Optional: Select the ``ta.key`` in the ``TLS-Auth`` section"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:66
msgid ""
"Click the Add button next to the Providers field and select the "
"``PKCS#11`` module for your Nitrokey. Multiple providers can be "
"specified, and for instance we will use ``OpenSC``."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:70
msgid ""
"On macOS, the most common location for modules to be found is in the "
"/usr/lib directory. Please refer to the documentation included with your "
"driver software for the location to use. OpenSC’s module can be found at "
"``/Library/OpenSC/lib/opensc-pkcs11.so``"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:73
msgid ""
"On Windows, the most common location for libraries is either in "
"``C:\\Program Files`` or ``C:\\Windows\\System32``. OpenSC libraries are "
"generally located at ``C:\\Program Files\\OpenSC "
"Project\\OpenSC\\pkcs11``. There may be more than one library available "
"here, you can try each one or simply add both."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:75
msgid "Choose a retrieval method from the Retrieval drop down menu"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:80
msgid ""
"If only one Nitrokey will ever be used on this computer, select ``Use "
"certificate name below``. If the Nitrokey is currently connected to the "
"computer, click the ``Detect`` button for Viscosity to automatically fill"
" in the Name field. Otherwise this field can be completed manually."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:86
msgid ""
"If in doubt, or if more than one Nitrokey may be used (i.e. multiple "
"users), then select ``Prompt for certificate name``."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:89
msgid ""
"If ``Prompt for certificate name`` was selected, Viscosity will "
"automatically detect the required key on the Nitrokey, using the "
"specified PKCS#11 module/s. Select from any of the found devices, or "
"enter the name of the ``serialized id`` to use manually. Again, the user "
"should be prompted for a password/PIN if required."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:91
msgid "Click the Save button and connect from your the main interface"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:96
msgid ""
"`Using Tokens/Smartcards (PKCS#11) "
"<https://www.sparklabs.com/support/kb/article/using-tokens-smartcards-"
"pkcs-11/>`__"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:99
msgid "`OpenVPN How-To <https://openvpn.net/community-resources/how-to/>`__"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:102
msgid "Notes"
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:104
msgid ""
"Viscosity is not free, and thus you might run into issues in using the "
"free version."
msgstr ""

#: ../pro/windows/openvpn-viscosity.rst:107
msgid ""
"We are considering the usage of `Pritunl <https://client.pritunl.com/>`__"
" as a free and open alternative."
msgstr ""

#: ../pro/putty.rst.inc:2
msgid "PuTTY"
msgstr ""

#: ../pro/putty.rst.inc:6
msgid ""
"This mini-howto assumes that the Nitrokey has been initialized and "
"contains cryptographic keys."
msgstr ""

#: ../pro/putty.rst.inc:8
msgid "**Required on the client side:**"
msgstr ""

#: ../pro/putty.rst.inc:10
msgid ""
"`PuTTY "
"<https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html>`__ or a "
"variant of it"
msgstr ""

#: ../pro/putty.rst.inc:13
msgid ""
"`GPG4Win <https://gpg4win.org/>`__ or `pageant.exe <https://smartcard-"
"auth.de/download-de.html>`__ with Smartcard support from Dr. Peter Koch"
msgstr ""

#: ../pro/putty.rst.inc:17
msgid ""
"Optional: `OpenPGP Minidriver "
"<https://wald.intevation.org/frs/?group_id=49&release_id=353>`__"
msgstr ""

#: ../pro/putty.rst.inc:20
msgid "**1) Pageant**"
msgstr ""

#: ../pro/putty.rst.inc:22
msgid ""
"start pageant.exe. That this is running is shown in the notification area"
" of the taskbar."
msgstr ""

#: ../pro/putty.rst.inc:29
msgid "A double click opens the view of the current keys."
msgstr ""

#: ../pro/putty.rst.inc:36
msgid "After inserting the key it looks like this."
msgstr ""

#: ../pro/putty.rst.inc:43
msgid ""
"If nothing is displayed here, pageant may have to be restarted or another"
" application is already using the stick. A possibly running pgp-agent "
"must be terminated! Now we only need the public key we want to store in "
"the ssh configuration of the server. Therefore we press CTRL while "
"inserting the stick…"
msgstr ""

#: ../pro/putty.rst.inc:50
msgid "and then view the Pageant-PublicKeys.txt."
msgstr ""

#: ../pro/putty.rst.inc:57
msgid ""
"I searched for the ssh-rsa entry of the auth key and added the line on "
"the server to the authorized_keys."
msgstr ""

#: ../pro/putty.rst.inc:59
msgid "**2) PuTTY**"
msgstr ""

#: ../pro/putty.rst.inc:61
msgid "There is surprisingly little to say about PuTTY itself."
msgstr ""

#: ../pro/putty.rst.inc:68
msgid ""
"“Attempt authentication using Pageant” must be set, which is the default "
"anyway."
msgstr ""

#: ../pro/putty.rst.inc:70
msgid ""
"That’s it, as soon as you connect to the server while pageant is running "
"and you have the keys, you will be asked for the password of the Crypto-"
"Stick and can log in."
msgstr ""

#: ../pro/putty.rst.inc:72
msgid "**3) openpgp-minidriver (optional)**"
msgstr ""

#: ../pro/putty.rst.inc:74
msgid ""
"If you are annoyed that Windows reports every time you plug in the stick "
"that no driver could be found for “Smartcard”, you can get rid of it. You"
" just have to install the x86 or x64 version of the above mentioned "
"driver and the smartcard looks like this:"
msgstr ""

#: ../pro/smart-policy.rst.inc:2
msgid "Login to Windows Domain Computers With MS Active Directory"
msgstr ""

#: ../pro/smart-policy.rst.inc:6
msgid ""
"Download and install the latest `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/smart-policy.rst.inc:8
msgid ""
"Use a text editor to add the following settings to ``C:\\Program "
"Files:\\OpenSC Project\\OpenSC\\opensc.conf``."
msgstr ""

#: ../pro/smart-policy.rst.inc:47
msgid ""
"Open a command terminal and enter “regedit”. Use regedit to import `this "
"file <https://www.nitrokey.com/sites/default/files/nk-hsm.reg>`__."
msgstr ""

#: ../pro/smart-policy.rst.inc:50
msgid ""
"Now you can enroll Nitrokeys for your users managed in Microsoft Active "
"Directory. You may either use Microsoft PKI, `gpgsm "
"<https://www.gnupg.org/documentation/manuals/gnupg/Howto-Create-a-Server-"
"Cert.html>`__, or `Smart Policy <https://www.mysmartlogon.com/products"
"/smart-policy.html>`__. The following steps describe the usage of Smart "
"Policy."
msgstr ""

#: ../pro/smart-policy.rst.inc:56
msgid ""
"`Download "
"<https://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203.exe>`__"
" and install Smart Policy."
msgstr ""

#: ../pro/smart-policy.rst.inc:58
msgid "Select “Read a smart card”"
msgstr ""

#: ../pro/smart-policy.rst.inc:65
msgid "Select the certificate, mapping, and user."
msgstr ""

#: ../pro/smart-policy.rst.inc:72
msgid "Verify the device status via CRL."
msgstr ""

#: ../pro/smart-policy.rst.inc:79
msgid "Choose a Group Policy Object (GPO)."
msgstr ""

#: ../pro/smart-policy.rst.inc:86
msgid "Confirm applying the mapping."
msgstr ""

